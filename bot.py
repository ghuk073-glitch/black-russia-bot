import logging
import random
import sqlite3
import time
import datetime
import asyncio
import flask
import threading
import hashlib
import secrets
import re
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    MessageHandler, 
    filters, 
    ContextTypes
)

# === –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ===
BOT_TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"
DATABASE_NAME = "black_russia_bot.db"

# === WEB SERVER FOR UPTIMEROBOT ===
app = flask.Flask(__name__)
start_time = datetime.datetime.now()

@app.route('/')
def home():
    return "ü§ñ Black Russia Bot is RUNNING!"

@app.route('/health')
def health():
    return {"status": "ok", "bot": "Black Russia"}, 200

def run_web_server():
    app.run(host='0.0.0.0', port=8080, debug=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–∫–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ (–í–°–ï —Å–µ—Ä–≤–µ—Ä–∞)
SERVERS = [
    "‚Ññ1 | Red", "‚Ññ2 | Green", "‚Ññ3 | Blue", "‚Ññ4 | Yellow", "‚Ññ5 | Orange", 
    "‚Ññ6 | Purple", "‚Ññ7 | Lime", "‚Ññ8 | Pink", "‚Ññ9 | Cherry", "‚Ññ10 | Black",
    "‚Ññ11 | Indigo", "‚Ññ12 | White", "‚Ññ13 | Magenta", "‚Ññ14 | Crimson", "‚Ññ15 | Gold",
    "‚Ññ16 | Azure", "‚Ññ17 | Platinum", "‚Ññ18 | Aqua", "‚Ññ19 | Gray", "‚Ññ20 | Ice",
    "‚Ññ21 | Chilli", "‚Ññ22 | Choco", "‚Ññ23 | Moscow", "‚Ññ24 | SPB", "‚Ññ25 | UFA",
    "‚Ññ26 | SOCHI", "‚Ññ27 | KAZAN", "‚Ññ28 | SAMARA", "‚Ññ29 | ROSTOV", "‚Ññ30 | ANAPA",
    "‚Ññ31 | EKB", "‚Ññ32 | Krasnodar", "‚Ññ33 | ARZAMAZ", "‚Ññ34 | NOVOSIB", "‚Ññ35 | GROZNY",
    "‚Ññ36 | SARATOV", "‚Ññ37 | OMSK", "‚Ññ38 | IRKUTSK", "‚Ññ39 | VOLGOGRAD", "‚Ññ40 | VORONEZH",
    "‚Ññ41 | BELGOROD", "‚Ññ42 | MAKHACHKALA", "‚Ññ43 | VLADIKAVKAZ", "‚Ññ44 | VLADIVOSTOK", "‚Ññ45 | KALININGRAD",
    "‚Ññ46 | CHELYABINSK", "‚Ññ47 | KRASNOYARSK", "‚Ññ48 | KHEBOKSARY", "‚Ññ49 | KHABAROVSK", "‚Ññ50 | PERM",
    "‚Ññ51 | TULA", "‚Ññ52 | RYAZAN", "‚Ññ53 | MURMANSK", "‚Ññ54 | PENZA", "‚Ññ55 | KURSK",
    "‚Ññ56 | ARCHANGELSK", "‚Ññ57 | ORENBURG", "‚Ññ58 | KIROV", "‚Ññ59 | KEMEROVO", "‚Ññ60 | TYUMEN",
    "‚Ññ61 | TOLYATI", "‚Ññ62 | IVANOVO", "‚Ññ63 | STAVROPOL", "‚Ññ64 | SMOLENSK", "‚Ññ65 | PSKOV",
    "‚Ññ66 | BRYANSK", "‚Ññ67 | OREL", "‚Ññ68 | YAROSLAVL", "‚Ññ69 | BARNAUL", "‚Ññ70 | LIPETSK",
    "‚Ññ71 | ULYANOVSK", "‚Ññ72 | YAKUTSK", "‚Ññ73 | TAMBOV", "‚Ññ74 | BRATSK", "‚Ññ75 | ASTRACHAN",
    "‚Ññ76 | CHITA", "‚Ññ77 | KOSTROMA", "‚Ññ78 | VLADIMIR", "‚Ññ79 | KALUGA", "‚Ññ80 | NOVGOROD",
    "‚Ññ81 | TAGANROG", "‚Ññ88 | VOLOGA", "‚Ññ89 | TVER", "‚Ññ90 | TOMSK", "‚Ññ91 | IZHEVSK",
    "‚Ññ92 | SURGUT", "‚Ññ93 | PODOLSK", "‚Ññ94 | MAGADAN", "‚Ññ95 | CHEREPOVETS"
]

# === –°–ò–°–¢–ï–ú–ê –ö–†–ê–§–¢–ê –ò –†–ï–°–£–†–°–û–í ===

# –†–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
RESOURCES = {
    "metal": {"name": "‚öôÔ∏è –ú–µ—Ç–∞–ª–ª", "emoji": "‚öôÔ∏è", "rarity": "common"},
    "electronics": {"name": "üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "emoji": "üîå", "rarity": "uncommon"},
    "engine": {"name": "üîß –î–≤–∏–≥–∞—Ç–µ–ª—å", "emoji": "üîß", "rarity": "rare"},
    "turbo": {"name": "üí® –¢—É—Ä–±–∏–Ω–∞", "emoji": "üí®", "rarity": "epic"},
    "carbon": {"name": "üñ§ –ö–∞—Ä–±–æ–Ω", "emoji": "üñ§", "rarity": "legendary"},
    "diamond": {"name": "üíé –ê–ª–º–∞–∑—ã", "emoji": "üíé", "rarity": "mythical"},
    "gold": {"name": "ü•á –ó–æ–ª–æ—Ç–æ", "emoji": "ü•á", "rarity": "legendary"},
    "uranium": {"name": "‚ò¢Ô∏è –£—Ä–∞–Ω", "emoji": "‚ò¢Ô∏è", "rarity": "mythical"},
    "ai_chip": {"name": "ü§ñ –ò–ò-—á–∏–ø", "emoji": "ü§ñ", "rarity": "mythical"},
    "quantum_core": {"name": "‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤–æ–µ —è–¥—Ä–æ", "emoji": "‚öõÔ∏è", "rarity": "mythical"}
}

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
CRAFTABLE_CARS = [
    {
        "name": "üöÄ CyberRoadster", 
        "price": 0, 
        "craft_price": 50000000,
        "resources": {"metal": 50, "electronics": 30, "engine": 5, "carbon": 10},
        "rarity": "legendary",
        "sell_price": 25000000,
        "description": "–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π –≥–∏–ø–µ—Ä–∫–∞—Ä –±—É–¥—É—â–µ–≥–æ"
    },
    {
        "name": "üêâ Dragon Wagon", 
        "price": 0, 
        "craft_price": 75000000,
        "resources": {"metal": 80, "electronics": 40, "turbo": 8, "gold": 5},
        "rarity": "legendary", 
        "sell_price": 37500000,
        "description": "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ —Å –æ–≥–Ω–µ–º–µ—Ç–æ–º"
    },
    {
        "name": "üåô Lunar Rover", 
        "price": 0, 
        "craft_price": 100000000,
        "resources": {"metal": 100, "electronics": 60, "engine": 10, "diamond": 3},
        "rarity": "mythical",
        "sell_price": 50000000,
        "description": "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ –¥–ª—è –ª—É–Ω–Ω–æ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏"
    },
    {
        "name": "‚ö° Thunder Bolt", 
        "price": 0, 
        "craft_price": 150000000,
        "resources": {"metal": 120, "electronics": 80, "turbo": 12, "uranium": 2},
        "rarity": "mythical",
        "sell_price": 75000000,
        "description": "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å —Å —è–¥–µ—Ä–Ω—ã–º —Ä–µ–∞–∫—Ç–æ—Ä–æ–º"
    },
    {
        "name": "üëë Tsar Tank", 
        "price": 0, 
        "craft_price": 200000000,
        "resources": {"metal": 200, "electronics": 100, "engine": 15, "gold": 10, "diamond": 5},
        "rarity": "mythical",
        "sell_price": 100000000,
        "description": "–¶–∞—Ä—å-—Ç–∞–Ω–∫ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏"
    },
    {
        "name": "ü§ñ Autobot X", 
        "price": 0, 
        "craft_price": 300000000,
        "resources": {"metal": 150, "electronics": 120, "ai_chip": 1, "quantum_core": 1},
        "rarity": "mythical",
        "sell_price": 150000000,
        "description": "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º"
    },
    {
        "name": "üåå Nebula Cruiser", 
        "price": 0, 
        "craft_price": 500000000,
        "resources": {"metal": 300, "electronics": 200, "quantum_core": 2, "uranium": 5},
        "rarity": "mythical",
        "sell_price": 250000000,
        "description": "–ú–µ–∂–∑–≤–µ–∑–¥–Ω—ã–π –∫—Ä–µ–π—Å–µ—Ä –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–∏—Ö —É–ª–∏—Ü"
    },
    {
        "name": "üíÄ Phantom Rider", 
        "price": 0, 
        "craft_price": 80000000,
        "resources": {"metal": 60, "electronics": 45, "carbon": 15, "engine": 8},
        "rarity": "legendary",
        "sell_price": 40000000,
        "description": "–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–π –±–∞–π–∫ —Å –Ω–µ–≤–∏–¥–∏–º–æ—Å—Ç—å—é"
    },
    {
        "name": "üî• Inferno GT", 
        "price": 0, 
        "craft_price": 120000000,
        "resources": {"metal": 90, "electronics": 70, "turbo": 10, "engine": 12},
        "rarity": "legendary",
        "sell_price": 60000000,
        "description": "–°–ø–æ—Ä—Ç–∫–∞—Ä —Å –ø–ª–∞–∑–º–µ–Ω–Ω—ã–º–∏ –¥–≤–∏–≥–∞—Ç–µ–ª—è–º–∏"
    },
    {
        "name": "‚ùÑÔ∏è Frost Wolf", 
        "price": 0, 
        "craft_price": 90000000,
        "resources": {"metal": 70, "electronics": 50, "carbon": 12, "diamond": 2},
        "rarity": "legendary",
        "sell_price": 45000000,
        "description": "–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫ —Å –∫—Ä–∏–æ–≥–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π"
    }
]

# –ö—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è
CRAFTABLE_WEAPONS = [
    {
        "name": "üî´ Plasma Rifle", 
        "price": 0, 
        "craft_price": 20000000,
        "resources": {"metal": 20, "electronics": 15, "uranium": 1},
        "rarity": "legendary",
        "damage": 200,
        "sell_price": 10000000,
        "description": "–ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞ –±—É–¥—É—â–µ–≥–æ"
    },
    {
        "name": "üí£ Quantum Grenade", 
        "price": 0, 
        "craft_price": 15000000,
        "resources": {"metal": 15, "electronics": 10, "quantum_core": 1},
        "rarity": "mythical",
        "damage": 500,
        "sell_price": 7500000,
        "description": "–ì—Ä–∞–Ω–∞—Ç–∞ —Å –∫–≤–∞–Ω—Ç–æ–≤—ã–º –≤–∑—Ä—ã–≤–æ–º"
    }
]

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –Ω–∏–∫–æ–≤
RUSSIAN_NAMES = ["ivan", "alex", "maxim", "dmitry", "sergey", "andrey", "mikhail", "vladimir", "nikita", "artyom"]
RUSSIAN_SURNAMES = ["ivanov", "petrov", "sidorov", "smirnov", "popov", "volkov", "kozlov", "novikov", "morozov", "pavlov"]
RANDOM_NICKNAMES = [f"{name}_{surname}" for name in RUSSIAN_NAMES for surname in RUSSIAN_SURNAMES]

# –ê–≤—Ç–æ–Ω–æ–º–µ—Ä–∞ (—Ä–æ—Å—Å–∏–π—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç: –±—É–∫–≤–∞-3 —Ü–∏—Ñ—Ä—ã-2 –±—É–∫–≤—ã-2-3 —Ü–∏—Ñ—Ä—ã)
CAR_NUMBER_LETTERS = "–ê–í–ï–ö–ú–ù–û–†–°–¢–£–•"
CAR_NUMBER_REGIONS = ["01", "02", "03", "04", "05", "06", "07", "08", "09", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33", "34", "35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45", "46", "47", "48", "49", "50", "51", "52", "53", "54", "55", "56", "57", "58", "59", "60", "61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77", "78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94", "95", "96", "97", "98", "99", "102", "113", "116", "121", "123", "124", "125", "134", "136", "138", "142", "147", "150", "152", "154", "159", "161", "163", "164", "173", "174", "177", "178", "186", "190", "196", "197", "199", "277", "299", "777", "799", "977"]

def generate_car_number():
    letter1 = random.choice(CAR_NUMBER_LETTERS)
    numbers1 = str(random.randint(0, 999)).zfill(3)
    letter2 = random.choice(CAR_NUMBER_LETTERS)
    letter3 = random.choice(CAR_NUMBER_LETTERS)
    region = random.choice(CAR_NUMBER_REGIONS)
    return f"{letter1}{numbers1}{letter2}{letter3}{region}"

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏
CAR_NUMBERS = [
    {"number": "–ê001–ê–ê777", "price": 5000000, "rarity": "legendary"},
    {"number": "–í777–í–í777", "price": 10000000, "rarity": "mythical"},
    {"number": "–°123–°–°197", "price": 3000000, "rarity": "epic"},
    {"number": "–ï666–ï–ö99", "price": 8000000, "rarity": "legendary"},
    {"number": "–ö999–ö–•77", "price": 12000000, "rarity": "mythical"},
    {"number": "–ú111–ú–†116", "price": 2000000, "rarity": "rare"},
    {"number": "–û555–û–û750", "price": 4000000, "rarity": "epic"},
    {"number": "–†333–†–£178", "price": 1500000, "rarity": "uncommon"},
    {"number": "–¢777–¢–°190", "price": 6000000, "rarity": "legendary"},
    {"name": "üöó Lada Vesta", "price": 2500000, "rarity": "common", "sell_price": 1250000},
    {"name": "üöó Lada Granta", "price": 2000000, "rarity": "common", "sell_price": 1000000},
    {"name": "üöó –í–ê–ó 2109", "price": 1500000, "rarity": "common", "sell_price": 750000},
    {"name": "üöó Ford Focus", "price": 4500000, "rarity": "uncommon", "sell_price": 2250000},
    {"name": "üöó Kia Rio", "price": 4250000, "rarity": "uncommon", "sell_price": 2125000},
    {"name": "üèé Ford Mustang", "price": 7500000, "rarity": "rare", "sell_price": 3750000},
    {"name": "üèé Chevrolet Camaro", "price": 7000000, "rarity": "rare", "sell_price": 3500000},
    {"name": "üèé BMW M5", "price": 12500000, "rarity": "epic", "sell_price": 6250000},
    {"name": "üèé Mercedes S63", "price": 11000000, "rarity": "epic", "sell_price": 5500000},
    {"name": "üöÄ Lamborghini Huracan", "price": 25000000, "rarity": "legendary", "sell_price": 12500000},
    {"name": "üöÄ Bugatti Chiron", "price": 40000000, "rarity": "mythical", "sell_price": 20000000},
    {"name": "üöó Lada Niva", "price": 1750000, "rarity": "common", "sell_price": 875000},
    {"name": "üöó Volkswagen Polo", "price": 4750000, "rarity": "uncommon", "sell_price": 2375000},
    {"name": "üöó Hyundai Solaris", "price": 4400000, "rarity": "uncommon", "sell_price": 2200000},
    {"name": "üèé Nissan GT-R", "price": 22500000, "rarity": "epic", "sell_price": 11250000},
    {"name": "üèé Porsche 911", "price": 19000000, "rarity": "epic", "sell_price": 9500000},
    {"name": "üöÄ Ferrari F8", "price": 32500000, "rarity": "legendary", "sell_price": 16250000},
    {"name": "üöÄ McLaren P1", "price": 37500000, "rarity": "legendary", "sell_price": 18750000},
    {"name": "üöÅ Helicopter", "price": 75000000, "rarity": "mythical", "sell_price": 37500000},
    {"name": "‚úàÔ∏è Private Jet", "price": 250000000, "rarity": "mythical", "sell_price": 125000000},
    {"name": "üöì Police Car", "price": 6000000, "rarity": "rare", "sell_price": 3000000},
    {"name": "üöê Minivan", "price": 3500000, "rarity": "common", "sell_price": 1750000},
    {"name": "üöö Truck", "price": 10000000, "rarity": "uncommon", "sell_price": 5000000},
    {"name": "üèç Motorcycle", "price": 3000000, "rarity": "common", "sell_price": 1500000},
    {"name": "üöú Tractor", "price": 4000000, "rarity": "common", "sell_price": 2000000},
    {"name": "üöõ Big Truck", "price": 17500000, "rarity": "rare", "sell_price": 8750000},
    {"name": "üöé Bus", "price": 14000000, "rarity": "uncommon", "sell_price": 7000000},
    {"name": "üöë Ambulance", "price": 9000000, "rarity": "rare", "sell_price": 4500000},
    {"name": "üöí Fire Truck", "price": 11000000, "rarity": "rare", "sell_price": 5500000},
    {"name": "üèé Formula 1", "price": 60000000, "rarity": "legendary", "sell_price": 30000000},
    {"name": "üöô Range Rover", "price": 15000000, "rarity": "epic", "sell_price": 7500000},
    {"name": "üöô Lexus LX", "price": 18000000, "rarity": "epic", "sell_price": 9000000},
    {"name": "üèé Audi R8", "price": 22000000, "rarity": "legendary", "sell_price": 11000000},
    {"name": "üöô Toyota Camry", "price": 5000000, "rarity": "uncommon", "sell_price": 2500000},
    {"name": "üöô Honda Civic", "price": 4500000, "rarity": "uncommon", "sell_price": 2250000},
    {"name": "üèé Tesla Model S", "price": 12000000, "rarity": "epic", "sell_price": 6000000},
    {"name": "üèé Tesla Cybertruck", "price": 20000000, "rarity": "legendary", "sell_price": 10000000},
    {"name": "üöô Bentley Continental", "price": 35000000, "rarity": "legendary", "sell_price": 17500000},
    {"name": "üöô Rolls Royce Phantom", "price": 45000000, "rarity": "mythical", "sell_price": 22500000},
    {"name": "üèé Aston Martin DB11", "price": 28000000, "rarity": "legendary", "sell_price": 14000000},
    {"name": "üöô Jaguar F-Pace", "price": 16000000, "rarity": "epic", "sell_price": 8000000},
    {"name": "üèé Maserati GranTurismo", "price": 24000000, "rarity": "legendary", "sell_price": 12000000}
]

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ñ–∞—Ä–º–∞ - —Ç–∏–ø—ã —Ä–∞–±–æ—Ç
FARM_JOBS = [
    {"name": "üöó –¢–∞–∫—Å–∏—Å—Ç", "min_reward": 10000, "max_reward": 50000, "cooldown": 300, "risk": 0.1, "exp": 50},
    {"name": "üè¢ –ö—É—Ä—å–µ—Ä", "min_reward": 15000, "max_reward": 75000, "cooldown": 400, "risk": 0.15, "exp": 75},
    {"name": "üõí –ü—Ä–æ–¥–∞–≤–µ—Ü", "min_reward": 20000, "max_reward": 100000, "cooldown": 500, "risk": 0.2, "exp": 100},
    {"name": "üíº –û—Ñ–∏—Å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫", "min_reward": 30000, "max_reward": 150000, "cooldown": 600, "risk": 0.05, "exp": 150},
    {"name": "üöö –î–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫", "min_reward": 50000, "max_reward": 250000, "cooldown": 800, "risk": 0.25, "exp": 250},
    {"name": "üëÆ‚Äç‚ôÇÔ∏è –û—Ö—Ä–∞–Ω–Ω–∏–∫", "min_reward": 40000, "max_reward": 200000, "cooldown": 700, "risk": 0.3, "exp": 200},
    {"name": "üçï –î–æ—Å—Ç–∞–≤–∫–∞ –µ–¥—ã", "min_reward": 25000, "max_reward": 125000, "cooldown": 450, "risk": 0.12, "exp": 125},
    {"name": "üîß –ê–≤—Ç–æ–º–µ—Ö–∞–Ω–∏–∫", "min_reward": 35000, "max_reward": 175000, "cooldown": 550, "risk": 0.18, "exp": 175},
    {"name": "üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å", "min_reward": 45000, "max_reward": 225000, "cooldown": 650, "risk": 0.22, "exp": 225},
    {"name": "üíª IT —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "min_reward": 60000, "max_reward": 300000, "cooldown": 900, "risk": 0.08, "exp": 300},
    {"name": "üë®‚Äç‚öïÔ∏è –í—Ä–∞—á", "min_reward": 70000, "max_reward": 350000, "cooldown": 950, "risk": 0.05, "exp": 350},
    {"name": "üë®‚Äçüè´ –£—á–∏—Ç–µ–ª—å", "min_reward": 40000, "max_reward": 200000, "cooldown": 600, "risk": 0.03, "exp": 200},
    {"name": "üë®‚Äçüíº –ë–∞–Ω–∫–∏—Ä", "min_reward": 80000, "max_reward": 400000, "cooldown": 1000, "risk": 0.1, "exp": 400},
    {"name": "üë®‚Äç‚úàÔ∏è –ü–∏–ª–æ—Ç", "min_reward": 100000, "max_reward": 500000, "cooldown": 1200, "risk": 0.15, "exp": 500},
    {"name": "üïµÔ∏è‚Äç‚ôÇÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤", "min_reward": 90000, "max_reward": 450000, "cooldown": 1100, "risk": 0.2, "exp": 450},
    {"name": "üë®‚Äçüî¨ –£—á–µ–Ω—ã–π", "min_reward": 85000, "max_reward": 425000, "cooldown": 1050, "risk": 0.07, "exp": 425},
    {"name": "üé¨ –ê–∫—Ç–µ—Ä", "min_reward": 75000, "max_reward": 375000, "cooldown": 950, "risk": 0.25, "exp": 375},
    {"name": "üë®‚Äçüç≥ –®–µ—Ñ-–ø–æ–≤–∞—Ä", "min_reward": 65000, "max_reward": 325000, "cooldown": 850, "risk": 0.12, "exp": 325},
    {"name": "üé® –•—É–¥–æ–∂–Ω–∏–∫", "min_reward": 55000, "max_reward": 275000, "cooldown": 750, "risk": 0.3, "exp": 275},
    {"name": "üìπ –ë–ª–æ–≥–µ—Ä", "min_reward": 95000, "max_reward": 475000, "cooldown": 1150, "risk": 0.35, "exp": 475}
]

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è —Ñ–∞—Ä–º–∞
FARM_EVENTS = [
    {"name": "üéØ –ë–æ–Ω—É—Å –∑–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "multiplier": 2.0, "chance": 0.1},
    {"name": "üí∏ –ù–∞—à–µ–ª –¥–µ–Ω—å–≥–∏ –Ω–∞ —É–ª–∏—Ü–µ", "bonus": 50000, "chance": 0.15},
    {"name": "üéÅ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–∫–∞–∑", "multiplier": 1.5, "chance": 0.2},
    {"name": "üëë VIP –∫–ª–∏–µ–Ω—Ç", "multiplier": 3.0, "chance": 0.05},
    {"name": "‚ö° –°–≤–µ—Ä—Ö—Å–∫–æ—Ä–æ—Å—Ç—å", "multiplier": 1.8, "chance": 0.12},
    {"name": "üîß –ü–æ–ª–æ–º–∫–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è", "multiplier": 0.5, "chance": 0.08},
    {"name": "üöì –ü—Ä–æ–±–∫–∏ –Ω–∞ –¥–æ—Ä–æ–≥–∞—Ö", "multiplier": 0.7, "chance": 0.1},
    {"name": "üåßÔ∏è –ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞", "multiplier": 0.8, "chance": 0.09},
    {"name": "üí∞ –ü—Ä–µ–º–∏—è –æ—Ç –Ω–∞—á–∞–ª—å—Å—Ç–≤–∞", "bonus": 100000, "chance": 0.07},
    {"name": "üéä –ü–µ—Ä–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞", "multiplier": 2.5, "chance": 0.06}
]

# –ù–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ (–æ—Ç 1 –¥–æ 100000)
def generate_phone_number():
    return str(random.randint(1, 100000)).zfill(6)

# –°–∏—Å—Ç–µ–º–∞ —Å–µ–º–µ–π –∫–∞–∫ –≤ Black Russia
FAMILY_RANKS = {
    1: {"name": "üî∞ –ù–æ–≤–∏—á–æ–∫", "max_members": 5, "bonus": 0.05, "upgrade_cost": 0},
    2: {"name": "ü•â –ë—Ä–æ–Ω–∑–∞", "max_members": 10, "bonus": 0.10, "upgrade_cost": 10000000},
    3: {"name": "ü•à –°–µ—Ä–µ–±—Ä–æ", "max_members": 20, "bonus": 0.15, "upgrade_cost": 25000000},
    4: {"name": "ü•á –ó–æ–ª–æ—Ç–æ", "max_members": 30, "bonus": 0.20, "upgrade_cost": 50000000},
    5: {"name": "üíé –ü–ª–∞—Ç–∏–Ω–∞", "max_members": 50, "bonus": 0.25, "upgrade_cost": 100000000},
    6: {"name": "üëë –õ–µ–≥–µ–Ω–¥–∞", "max_members": 100, "bonus": 0.30, "upgrade_cost": 250000000}
}

FAMILY_ROLES = {
    "owner": {"name": "üëë –í–ª–∞–¥–µ–ª–µ—Ü", "permissions": ["all"]},
    "co_owner": {"name": "‚≠ê –ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å", "permissions": ["invite", "kick", "manage_members"]},
    "officer": {"name": "üî∞ –û—Ñ–∏—Ü–µ—Ä", "permissions": ["invite", "kick"]},
    "member": {"name": "üë§ –£—á–∞—Å—Ç–Ω–∏–∫", "permissions": []}
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–æ–º–æ–≤ –∏–∑ Black Russia
HOUSES = [
    {"name": "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ö—Ä—É—â–µ–≤–∫–µ", "price": 5000000, "rarity": "common", "sell_price": 2500000},
    {"name": "üè† –ö–≤–∞—Ä—Ç–∏—Ä–∞ –≤ –ø–∞–Ω–µ–ª—å–∫–µ", "price": 12500000, "rarity": "common", "sell_price": 6250000},
    {"name": "üè† –¢–∞—É–Ω—Ö–∞—É—Å", "price": 25000000, "rarity": "uncommon", "sell_price": 12500000},
    {"name": "üè° –ó–∞–≥–æ—Ä–æ–¥–Ω—ã–π –¥–æ–º", "price": 50000000, "rarity": "rare", "sell_price": 25000000},
    {"name": "üè∞ –í–∏–ª–ª–∞", "price": 125000000, "rarity": "epic", "sell_price": 62500000},
    {"name": "üèØ –û—Å–æ–±–Ω—è–∫", "price": 250000000, "rarity": "legendary", "sell_price": 125000000},
    {"name": "üè§ –†–µ–∑–∏–¥–µ–Ω—Ü–∏—è", "price": 500000000, "rarity": "mythical", "sell_price": 250000000},
    {"name": "üè¢ –ü–µ–Ω—Ç—Ö–∞—É—Å", "price": 75000000, "rarity": "epic", "sell_price": 37500000},
    {"name": "üèõ –î–≤–æ—Ä–µ—Ü", "price": 1000000000, "rarity": "mythical", "sell_price": 500000000},
    {"name": "üè¨ –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä", "price": 1500000000, "rarity": "mythical", "sell_price": 750000000},
    {"name": "üèò –ö–æ—Ç—Ç–µ–¥–∂", "price": 40000000, "rarity": "uncommon", "sell_price": 20000000},
    {"name": "üèö –î–∞—á–∞", "price": 15000000, "rarity": "common", "sell_price": 7500000},
    {"name": "üè£ –û—Ñ–∏—Å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ", "price": 200000000, "rarity": "legendary", "sell_price": 100000000},
    {"name": "üè™ –ú–∞–≥–∞–∑–∏–Ω", "price": 30000000, "rarity": "uncommon", "sell_price": 15000000},
    {"name": "üè® –ì–æ—Å—Ç–∏–Ω–∏—Ü–∞", "price": 175000000, "rarity": "legendary", "sell_price": 87500000},
    {"name": "üè¢ –ù–µ–±–æ—Å–∫—Ä–µ–±", "price": 2000000000, "rarity": "mythical", "sell_price": 1000000000},
    {"name": "üè∞ –ó–∞–º–æ–∫", "price": 750000000, "rarity": "mythical", "sell_price": 375000000},
    {"name": "üè° –§–∞–∑–µ–Ω–¥–∞", "price": 60000000, "rarity": "rare", "sell_price": 30000000},
    {"name": "üè† –°—Ç—É–¥–∏—è", "price": 8000000, "rarity": "common", "sell_price": 4000000},
    {"name": "üè° –£—Å–∞–¥—å–±–∞", "price": 300000000, "rarity": "legendary", "sell_price": 150000000}
]

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—Ä—É–∂–∏—è –∏–∑ Black Russia
WEAPONS = [
    {"name": "üî™ –ù–æ–∂", "price": 250000, "rarity": "common", "damage": 10, "sell_price": 125000},
    {"name": "üèè –ë–µ–π—Å–±–æ–ª—å–Ω–∞—è –±–∏—Ç–∞", "price": 400000, "rarity": "common", "damage": 15, "sell_price": 200000},
    {"name": "üî´ –ü–∏—Å—Ç–æ–ª–µ—Ç –ü–ú", "price": 750000, "rarity": "common", "damage": 25, "sell_price": 375000},
    {"name": "üî´ Glock-17", "price": 1000000, "rarity": "uncommon", "damage": 30, "sell_price": 500000},
    {"name": "üî´ AK-47", "price": 2500000, "rarity": "rare", "damage": 50, "sell_price": 1250000},
    {"name": "üî´ M4A1", "price": 3000000, "rarity": "rare", "damage": 55, "sell_price": 1500000},
    {"name": "üî´ AWP", "price": 4000000, "rarity": "epic", "damage": 80, "sell_price": 2000000},
    {"name": "üí£ –†–ü–ì-7", "price": 7500000, "rarity": "legendary", "damage": 150, "sell_price": 3750000},
    {"name": "üî´ –ó–æ–ª–æ—Ç–æ–π AK-47", "price": 10000000, "rarity": "legendary", "damage": 100, "sell_price": 5000000},
    {"name": "üî´ Desert Eagle", "price": 1750000, "rarity": "uncommon", "damage": 40, "sell_price": 875000},
    {"name": "üî´ MP5", "price": 2250000, "rarity": "rare", "damage": 45, "sell_price": 1125000},
    {"name": "üî´ Sniper Rifle", "price": 6000000, "rarity": "epic", "damage": 90, "sell_price": 3000000},
    {"name": "üí£ –ì—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç", "price": 12500000, "rarity": "legendary", "damage": 200, "sell_price": 6250000},
    {"name": "üî´ –ü–ª–∞–∑–º–µ–Ω–Ω–∞—è –ø—É—à–∫–∞", "price": 25000000, "rarity": "mythical", "damage": 300, "sell_price": 12500000},
    {"name": "üî´ UZI", "price": 2000000, "rarity": "rare", "damage": 35, "sell_price": 1000000},
    {"name": "üî´ Thompson", "price": 2800000, "rarity": "rare", "damage": 48, "sell_price": 1400000},
    {"name": "üí£ –ú–∏–Ω—ã", "price": 3500000, "rarity": "epic", "damage": 120, "sell_price": 1750000},
    {"name": "üî´ –î—Ä–æ–±–æ–≤–∏–∫", "price": 3200000, "rarity": "epic", "damage": 70, "sell_price": 1600000},
    {"name": "üî´ –õ–∞–∑–µ—Ä–Ω–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞", "price": 30000000, "rarity": "mythical", "damage": 350, "sell_price": 15000000},
    {"name": "üõ° –©–∏—Ç", "price": 1500000, "rarity": "uncommon", "damage": 5, "sell_price": 750000}
]

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –∏–∑ Black Russia
BUSINESSES = [
    {"name": "üè™ –ú–∞–≥–∞–∑–∏–Ω –ø—Ä–æ–¥—É–∫—Ç–æ–≤", "price": 10000000, "income": 250000, "supply_cost": 500000, "rarity": "common", "sell_price": 5000000},
    {"name": "‚õΩ –ê–≤—Ç–æ–∑–∞–ø—Ä–∞–≤–∫–∞", "price": 25000000, "income": 600000, "supply_cost": 1250000, "rarity": "uncommon", "sell_price": 12500000},
    {"name": "üéÆ –ò–≥—Ä–æ–≤–æ–π –∫–ª—É–±", "price": 40000000, "income": 1000000, "supply_cost": 2000000, "rarity": "rare", "sell_price": 20000000},
    {"name": "üíé –Æ–≤–µ–ª–∏—Ä–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω", "price": 75000000, "income": 1750000, "supply_cost": 3500000, "rarity": "epic", "sell_price": 37500000},
    {"name": "üè¢ –û—Ç–µ–ª—å", "price": 125000000, "income": 3000000, "supply_cost": 6000000, "rarity": "legendary", "sell_price": 62500000},
    {"name": "üõ≥ –°—É–¥–æ—Ö–æ–¥–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è", "price": 250000000, "income": 6000000, "supply_cost": 12000000, "rarity": "mythical", "sell_price": 125000000},
    {"name": "üçï –ü–∏—Ü—Ü–µ—Ä–∏—è", "price": 15000000, "income": 400000, "supply_cost": 750000, "rarity": "common", "sell_price": 7500000},
    {"name": "üè≠ –ó–∞–≤–æ–¥", "price": 200000000, "income": 5000000, "supply_cost": 10000000, "rarity": "legendary", "sell_price": 100000000},
    {"name": "üé≤ –ö–∞–∑–∏–Ω–æ", "price": 300000000, "income": 7500000, "supply_cost": 15000000, "rarity": "mythical", "sell_price": 150000000},
    {"name": "üíª IT –∫–æ–º–ø–∞–Ω–∏—è", "price": 175000000, "income": 4500000, "supply_cost": 9000000, "rarity": "legendary", "sell_price": 87500000},
    {"name": "üè• –ë–æ–ª—å–Ω–∏—Ü–∞", "price": 150000000, "income": 3500000, "supply_cost": 7000000, "rarity": "legendary", "sell_price": 75000000},
    {"name": "üè¶ –ë–∞–Ω–∫", "price": 500000000, "income": 10000000, "supply_cost": 20000000, "rarity": "mythical", "sell_price": 250000000},
    {"name": "üé≠ –ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä", "price": 80000000, "income": 1800000, "supply_cost": 3600000, "rarity": "epic", "sell_price": 40000000},
    {"name": "üèü –°—Ç–∞–¥–∏–æ–Ω", "price": 350000000, "income": 8000000, "supply_cost": 16000000, "rarity": "mythical", "sell_price": 175000000},
    {"name": "üöó –ê–≤—Ç–æ—Å–∞–ª–æ–Ω", "price": 120000000, "income": 2800000, "supply_cost": 5600000, "rarity": "legendary", "sell_price": 60000000}
]

# –°–∏–º-–∫–∞—Ä—Ç—ã —Å –Ω–æ–º–µ—Ä–∞–º–∏ –æ—Ç 1 –¥–æ 100000
def generate_sim_cards(count=50):
    sim_cards = []
    for _ in range(count):
        number = generate_phone_number()
        price = random.randint(500000, 5000000)
        rarity = random.choice(["common", "uncommon", "rare", "epic", "legendary", "mythical"])
        sim_cards.append({"number": number, "price": price, "rarity": rarity})
    return sim_cards

SIM_CARDS = generate_sim_cards(50)

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–∫–∏–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã –∏–∑ Black Russia
SKINS_AND_ACCESSORIES = [
    # –ú–∞—Å–∫–∏
    {"name": "üé≠ –ú–∞—Å–∫–∞ Anonymous", "price": 500000, "type": "mask", "rarity": "common"},
    {"name": "üé≠ –ú–∞—Å–∫–∞ Guy Fawkes", "price": 750000, "type": "mask", "rarity": "uncommon"},
    {"name": "üé≠ –ó–æ–ª–æ—Ç–∞—è –º–∞—Å–∫–∞", "price": 2000000, "type": "mask", "rarity": "rare"},
    {"name": "üé≠ –ú–∞—Å–∫–∞ –î–∂–æ–∫–µ—Ä–∞", "price": 1500000, "type": "mask", "rarity": "rare"},
    {"name": "üé≠ –ú–∞—Å–∫–∞ –î–∂–µ–π—Å–æ–Ω–∞", "price": 1200000, "type": "mask", "rarity": "uncommon"},
    {"name": "üé≠ –ú–∞—Å–∫–∞ –°–∫–∞–π—Ä–∏–º–∞", "price": 3000000, "type": "mask", "rarity": "epic"},
    {"name": "üé≠ –ú–∞—Å–∫–∞ –ë—ç—Ç–º–µ–Ω–∞", "price": 5000000, "type": "mask", "rarity": "legendary"},
    {"name": "üé≠ –ú–∞—Å–∫–∞ –ñ–µ–ª–µ–∑–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞", "price": 8000000, "type": "mask", "rarity": "mythical"},
    
    # –û–¥–µ–∂–¥–∞
    {"name": "üëï –§—É—Ç–±–æ–ª–∫–∞ Basic", "price": 250000, "type": "clothes", "rarity": "common"},
    {"name": "üëï –§—É—Ç–±–æ–ª–∫–∞ Premium", "price": 500000, "type": "clothes", "rarity": "uncommon"},
    {"name": "üëî –ö–æ—Å—Ç—é–º –±–∏–∑–Ω–µ—Å–º–µ–Ω–∞", "price": 1500000, "type": "clothes", "rarity": "rare"},
    {"name": "ü•ã –ö–æ—Å—Ç—é–º –Ω–∏–Ω–¥–∑—è", "price": 2000000, "type": "clothes", "rarity": "epic"},
    {"name": "üëó –í–µ—á–µ—Ä–Ω–µ–µ –ø–ª–∞—Ç—å–µ", "price": 1800000, "type": "clothes", "rarity": "rare"},
    {"name": "üß• –ö–æ–∂–∞–Ω–∞—è –∫—É—Ä—Ç–∫–∞", "price": 1200000, "type": "clothes", "rarity": "uncommon"},
    {"name": "ü•º –õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–π —Ö–∞–ª–∞—Ç", "price": 800000, "type": "clothes", "rarity": "common"},
    {"name": "üëò –ö–∏–º–æ–Ω–æ", "price": 2200000, "type": "clothes", "rarity": "epic"},
    {"name": "ü¶∫ –¢–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∂–∏–ª–µ—Ç", "price": 2500000, "type": "clothes", "rarity": "rare"},
    {"name": "üëë –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∞—è –º–∞–Ω—Ç–∏—è", "price": 10000000, "type": "clothes", "rarity": "mythical"},
    
    # –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
    {"name": "üï∂ –°–æ–ª–Ω–µ—á–Ω—ã–µ –æ—á–∫–∏", "price": 300000, "type": "accessory", "rarity": "common"},
    {"name": "‚åö –ß–∞—Å—ã Rolex", "price": 1000000, "type": "accessory", "rarity": "uncommon"},
    {"name": "üíç –ó–æ–ª–æ—Ç–æ–µ –∫–æ–ª—å—Ü–æ", "price": 750000, "type": "accessory", "rarity": "rare"},
    {"name": "‚õì –¶–µ–ø—å –∑–æ–ª–æ—Ç–∞—è", "price": 1250000, "type": "accessory", "rarity": "epic"},
    {"name": "üéí –†—é–∫–∑–∞–∫ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π", "price": 800000, "type": "accessory", "rarity": "uncommon"},
    {"name": "üíº –ö–æ–∂–∞–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å", "price": 600000, "type": "accessory", "rarity": "common"},
    {"name": "üß≥ –ß–µ–º–æ–¥–∞–Ω VIP", "price": 1500000, "type": "accessory", "rarity": "rare"},
    {"name": "üìø –ß–µ—Ç–∫–∏", "price": 400000, "type": "accessory", "rarity": "common"},
    {"name": "üîë –ö–ª—é—á–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞", "price": 5000000, "type": "accessory", "rarity": "legendary"},
    {"name": "üíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç–æ–≤—ã–π –∫—É–ª–æ–Ω", "price": 3000000, "type": "accessory", "rarity": "epic"},
    
    # –ì–æ–ª–æ–≤–Ω—ã–µ —É–±–æ—Ä—ã
    {"name": "üé© –¶–∏–ª–∏–Ω–¥—Ä", "price": 600000, "type": "hat", "rarity": "rare"},
    {"name": "üß¢ –ë–µ–π—Å–±–æ–ª–∫–∞", "price": 200000, "type": "hat", "rarity": "common"},
    {"name": "üëí –®–ª—è–ø–∞ –∫–æ–≤–±–æ—è", "price": 450000, "type": "hat", "rarity": "uncommon"},
    {"name": "‚õë –ö–∞—Å–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—è", "price": 350000, "type": "hat", "rarity": "common"},
    {"name": "üéì –í—ã–ø—É—Å–∫–Ω–∞—è —à–∞–ø–æ—á–∫–∞", "price": 700000, "type": "hat", "rarity": "uncommon"},
    {"name": "üëë –ö–æ—Ä–æ–Ω–∞", "price": 8000000, "type": "hat", "rarity": "mythical"},
    {"name": "ü™ñ –ê—Ä–º–µ–π—Å–∫–∏–π —à–ª–µ–º", "price": 1200000, "type": "hat", "rarity": "rare"},
    
    # –û–±—É–≤—å
    {"name": "üëü –ö—Ä–æ—Å—Å–æ–≤–∫–∏ Nike", "price": 400000, "type": "shoes", "rarity": "uncommon"},
    {"name": "üëû –¢—É—Ñ–ª–∏ –∫–æ–∂–∞–Ω—ã–µ", "price": 350000, "type": "shoes", "rarity": "common"},
    {"name": "ü•æ –ë–æ—Ç–∏–Ω–∫–∏ —Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ", "price": 800000, "type": "shoes", "rarity": "uncommon"},
    {"name": "üë¢ –°–∞–ø–æ–≥–∏ –∫–æ–≤–±–æ–π—Å–∫–∏–µ", "price": 600000, "type": "shoes", "rarity": "rare"},
    {"name": "ü©¥ –°–ª–∞–Ω—Ü—ã –ø–ª—è–∂–Ω—ã–µ", "price": 150000, "type": "shoes", "rarity": "common"},
    {"name": "üë† –¢—É—Ñ–ª–∏ –Ω–∞ –∫–∞–±–ª—É–∫–∞—Ö", "price": 550000, "type": "shoes", "rarity": "uncommon"},
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∫–∏–Ω—ã
    {"name": "üé® –°–∫–∏–Ω '–ù–µ–æ–Ω'", "price": 2500000, "type": "special", "rarity": "epic"},
    {"name": "üåà –°–∫–∏–Ω '–†–∞–¥—É–≥–∞'", "price": 3000000, "type": "special", "rarity": "epic"},
    {"name": "üíÄ –°–∫–∏–Ω '–•—ç–ª–ª–æ—É–∏–Ω'", "price": 1800000, "type": "special", "rarity": "rare"},
    {"name": "üéÑ –°–∫–∏–Ω '–ù–æ–≤—ã–π –ì–æ–¥'", "price": 2000000, "type": "special", "rarity": "rare"},
    {"name": "‚≠ê –°–∫–∏–Ω '–ó–≤–µ–∑–¥–Ω–∞—è –Ω–æ—á—å'", "price": 5000000, "type": "special", "rarity": "legendary"},
    {"name": "üî• –°–∫–∏–Ω '–û–≥–Ω–µ–Ω–Ω—ã–π'", "price": 4500000, "type": "special", "rarity": "legendary"},
    {"name": "üíß –°–∫–∏–Ω '–õ–µ–¥—è–Ω–æ–π'", "price": 4500000, "type": "special", "rarity": "legendary"},
    {"name": "‚ö° –°–∫–∏–Ω '–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π'", "price": 4800000, "type": "special", "rarity": "legendary"},
    {"name": "üåå –°–∫–∏–Ω '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π'", "price": 7500000, "type": "special", "rarity": "mythical"},
    {"name": "üëë –°–∫–∏–Ω '–ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π'", "price": 10000000, "type": "special", "rarity": "mythical"}
]

# === –°–ò–°–¢–ï–ú–ê BLACK PASS ===
BLACK_PASS_QUESTS = [
    {
        "id": 1,
        "name": "üöÄ –ù–∞—á–∞–ª–æ –ø—É—Ç–∏",
        "description": "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 1,000,000 ‚ÇΩ",
        "requirement": {"type": "money", "amount": 1000000},
        "reward": {"money": 500000, "exp": 1000, "items": ["‚öôÔ∏è –ú–µ—Ç–∞–ª–ª"]}
    },
    {
        "id": 2,
        "name": "üè† –ü–µ—Ä–≤—ã–π –¥–æ–º",
        "description": "–ö—É–ø–∏—Ç–µ –ø–µ—Ä–≤—É—é –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
        "requirement": {"type": "house", "amount": 1},
        "reward": {"money": 1000000, "exp": 2000, "items": ["üîå –≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞"]}
    },
    {
        "id": 3,
        "name": "üöó –ê–≤—Ç–æ–ª—é–±–∏—Ç–µ–ª—å",
        "description": "–ö—É–ø–∏—Ç–µ 3 –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        "requirement": {"type": "cars", "amount": 3},
        "reward": {"money": 2000000, "exp": 3000, "items": ["üîß –î–≤–∏–≥–∞—Ç–µ–ª—å"]}
    },
    {
        "id": 4,
        "name": "üíº –ë–∏–∑–Ω–µ—Å–º–µ–Ω",
        "description": "–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –±–∏–∑–Ω–µ—Å",
        "requirement": {"type": "business", "amount": 1},
        "reward": {"money": 3000000, "exp": 4000, "items": ["üí® –¢—É—Ä–±–∏–Ω–∞"]}
    },
    {
        "id": 5,
        "name": "üë• –ö–æ–º–∞–Ω–¥–Ω—ã–π –∏–≥—Ä–æ–∫",
        "description": "–í—Å—Ç—É–ø–∏—Ç–µ –≤ —Å–µ–º—å—é",
        "requirement": {"type": "family", "amount": 1},
        "reward": {"money": 1500000, "exp": 2500, "items": ["üñ§ –ö–∞—Ä–±–æ–Ω"]}
    },
    {
        "id": 6,
        "name": "üéØ –°–Ω–∞–π–ø–µ—Ä",
        "description": "–ö—É–ø–∏—Ç–µ —Å–Ω–∞–π–ø–µ—Ä—Å–∫—É—é –≤–∏–Ω—Ç–æ–≤–∫—É",
        "requirement": {"type": "weapon", "name": "üî´ AWP"},
        "reward": {"money": 2500000, "exp": 3500, "items": ["ü•á –ó–æ–ª–æ—Ç–æ"]}
    },
    {
        "id": 7,
        "name": "‚≠ê –í–µ—Ç–µ—Ä–∞–Ω",
        "description": "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 —É—Ä–æ–≤–Ω—è",
        "requirement": {"type": "level", "amount": 10},
        "reward": {"money": 5000000, "exp": 5000, "items": ["üíé –ê–ª–º–∞–∑—ã"]}
    },
    {
        "id": 8,
        "name": "üî® –ú–∞—Å—Ç–µ—Ä –Ω–∞ –≤—Å–µ —Ä—É–∫–∏",
        "description": "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–µ–¥–º–µ—Ç —á–µ—Ä–µ–∑ –∫—Ä–∞—Ñ—Ç",
        "requirement": {"type": "craft", "amount": 1},
        "reward": {"money": 4000000, "exp": 4500, "items": ["‚ò¢Ô∏è –£—Ä–∞–Ω"]}
    },
    {
        "id": 9,
        "name": "üèÜ –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
        "description": "–°–æ–±–µ—Ä–∏—Ç–µ 10 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
        "requirement": {"type": "collection", "amount": 10},
        "reward": {"money": 6000000, "exp": 6000, "items": ["ü§ñ –ò–ò-—á–∏–ø"]}
    },
    {
        "id": 10,
        "name": "üëë –ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
        "description": "–ó–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ 100,000,000 ‚ÇΩ",
        "requirement": {"type": "money", "amount": 100000000},
        "reward": {"money": 20000000, "exp": 10000, "items": ["‚öõÔ∏è –ö–≤–∞–Ω—Ç–æ–≤–æ–µ —è–¥—Ä–æ"]}
    }
]

# –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class AuthenticationSystem:
    def __init__(self):
        self.pending_auth = {}
    
    def generate_auth_code(self, user_id):
        code = str(random.randint(100000, 999999))
        self.pending_auth[user_id] = {
            'code': code,
            'timestamp': time.time(),
            'attempts': 0
        }
        return code
    
    def verify_auth_code(self, user_id, code):
        if user_id not in self.pending_auth:
            return False, "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª"
        
        auth_data = self.pending_auth[user_id]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ (–∫–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç)
        if time.time() - auth_data['timestamp'] > 300:
            del self.pending_auth[user_id]
            return False, "–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª"
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
        if auth_data['attempts'] >= 3:
            del self.pending_auth[user_id]
            return False, "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫"
        
        auth_data['attempts'] += 1
        
        if auth_data['code'] == code:
            del self.pending_auth[user_id]
            return True, "–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        else:
            remaining_attempts = 3 - auth_data['attempts']
            return False, f"–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}"

auth_system = AuthenticationSystem()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_database():
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            first_name TEXT,
            last_name TEXT,
            balance INTEGER DEFAULT 1000000,
            level INTEGER DEFAULT 1,
            experience INTEGER DEFAULT 0,
            server TEXT DEFAULT NULL,
            phone_number TEXT DEFAULT NULL,
            car_number TEXT DEFAULT NULL,
            registered_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            is_authenticated BOOLEAN DEFAULT FALSE,
            black_pass_tier INTEGER DEFAULT 0
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_inventory (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            item_type TEXT,
            item_name TEXT,
            item_data TEXT,
            acquired_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_resources (
            user_id INTEGER,
            resource_type TEXT,
            quantity INTEGER DEFAULT 0,
            PRIMARY KEY (user_id, resource_type),
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–µ—Å—Ç–æ–≤ Black Pass
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_quests (
            user_id INTEGER,
            quest_id INTEGER,
            progress INTEGER DEFAULT 0,
            completed BOOLEAN DEFAULT FALSE,
            completed_at TIMESTAMP,
            PRIMARY KEY (user_id, quest_id),
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å–µ–º–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS families (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            name TEXT UNIQUE,
            tag TEXT UNIQUE,
            owner_id INTEGER,
            level INTEGER DEFAULT 1,
            balance INTEGER DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (owner_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–º–µ–π
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS family_members (
            family_id INTEGER,
            user_id INTEGER,
            role TEXT DEFAULT 'member',
            joined_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            PRIMARY KEY (family_id, user_id),
            FOREIGN KEY (family_id) REFERENCES families (id),
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ñ–∞—Ä–º–∞
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_farm (
            user_id INTEGER PRIMARY KEY,
            job_type TEXT,
            start_time TIMESTAMP,
            end_time TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫—Ä–∞–∂
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS user_robberies (
            user_id INTEGER PRIMARY KEY,
            last_robbery TIMESTAMP,
            success_count INTEGER DEFAULT 0,
            fail_count INTEGER DEFAULT 0,
            FOREIGN KEY (user_id) REFERENCES users (user_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
def get_user_data(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = cursor.fetchone()
    conn.close()
    
    if user:
        return {
            'user_id': user[0],
            'username': user[1],
            'first_name': user[2],
            'last_name': user[3],
            'balance': user[4],
            'level': user[5],
            'experience': user[6],
            'server': user[7],
            'phone_number': user[8],
            'car_number': user[9],
            'registered_at': user[10],
            'last_active': user[11],
            'is_authenticated': user[12],
            'black_pass_tier': user[13]
        }
    return None

def update_user_data(user_id, **kwargs):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    if kwargs:
        set_clause = ', '.join([f"{key} = ?" for key in kwargs.keys()])
        values = list(kwargs.values())
        values.append(user_id)
        cursor.execute(f'UPDATE users SET {set_clause} WHERE user_id = ?', values)
    
    conn.commit()
    conn.close()

def create_user(user_id, username, first_name, last_name):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∞–≤—Ç–æ–Ω–æ–º–µ—Ä–∞
    phone_number = generate_phone_number()
    car_number = generate_car_number()
    
    cursor.execute('''
        INSERT OR IGNORE INTO users 
        (user_id, username, first_name, last_name, phone_number, car_number) 
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, username, first_name, last_name, phone_number, car_number))
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–≤–µ—Å—Ç–æ–≤ Black Pass
    for quest in BLACK_PASS_QUESTS:
        cursor.execute('''
            INSERT OR IGNORE INTO user_quests (user_id, quest_id)
            VALUES (?, ?)
        ''', (user_id, quest["id"]))
    
    conn.commit()
    conn.close()

def get_user_inventory(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM user_inventory WHERE user_id = ?', (user_id,))
    inventory = cursor.fetchall()
    conn.close()
    return inventory

def add_to_inventory(user_id, item_type, item_name, item_data):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        INSERT INTO user_inventory (user_id, item_type, item_name, item_data)
        VALUES (?, ?, ?, ?)
    ''', (user_id, item_type, item_name, item_data))
    conn.commit()
    conn.close()

def get_user_resources(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM user_resources WHERE user_id = ?', (user_id,))
    resources = cursor.fetchall()
    conn.close()
    
    resource_dict = {}
    for resource in resources:
        resource_dict[resource[1]] = resource[2]
    
    return resource_dict

def update_user_resource(user_id, resource_type, quantity):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('''
        INSERT OR REPLACE INTO user_resources (user_id, resource_type, quantity)
        VALUES (?, ?, ?)
    ''', (user_id, resource_type, quantity))
    
    conn.commit()
    conn.close()

def get_user_quests(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM user_quests WHERE user_id = ?', (user_id,))
    quests = cursor.fetchall()
    conn.close()
    
    quest_dict = {}
    for quest in quests:
        quest_dict[quest[1]] = {
            "progress": quest[2],
            "completed": bool(quest[3]),
            "completed_at": quest[4]
        }
    
    return quest_dict

def update_user_quest(user_id, quest_id, progress, completed=False):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    if completed:
        cursor.execute('''
            UPDATE user_quests 
            SET progress = ?, completed = TRUE, completed_at = CURRENT_TIMESTAMP
            WHERE user_id = ? AND quest_id = ?
        ''', (progress, user_id, quest_id))
    else:
        cursor.execute('''
            UPDATE user_quests 
            SET progress = ?
            WHERE user_id = ? AND quest_id = ?
        ''', (progress, user_id, quest_id))
    
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ–º—å—è–º–∏
def create_family(name, tag, owner_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    try:
        cursor.execute('''
            INSERT INTO families (name, tag, owner_id)
            VALUES (?, ?, ?)
        ''', (name, tag, owner_id))
        
        family_id = cursor.lastrowid
        
        cursor.execute('''
            INSERT INTO family_members (family_id, user_id, role)
            VALUES (?, ?, 'owner')
        ''', (family_id, owner_id))
        
        conn.commit()
        return True, "–°–µ–º—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
    except sqlite3.IntegrityError:
        return False, "–°–µ–º—å—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ —Ç–µ–≥–æ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
    finally:
        conn.close()

def get_family_by_name(name):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM families WHERE name = ?', (name,))
    family = cursor.fetchone()
    conn.close()
    return family

def get_user_family(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('''
        SELECT f.*, fm.role 
        FROM families f 
        JOIN family_members fm ON f.id = fm.family_id 
        WHERE fm.user_id = ?
    ''', (user_id,))
    family = cursor.fetchone()
    conn.close()
    return family

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–∞—Ä–º–∞
def start_farming(user_id, job_type):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    start_time = datetime.datetime.now()
    job_data = next((job for job in FARM_JOBS if job["name"] == job_type), None)
    
    if job_data:
        end_time = start_time + datetime.timedelta(seconds=job_data["cooldown"])
        
        cursor.execute('''
            INSERT OR REPLACE INTO user_farm (user_id, job_type, start_time, end_time)
            VALUES (?, ?, ?, ?)
        ''', (user_id, job_type, start_time, end_time))
    
    conn.commit()
    conn.close()
    return job_data

def get_farm_status(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM user_farm WHERE user_id = ?', (user_id,))
    farm_data = cursor.fetchone()
    conn.close()
    return farm_data

def complete_farming(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM user_farm WHERE user_id = ?', (user_id,))
    farm_data = cursor.fetchone()
    
    if farm_data:
        job_type = farm_data[1]
        end_time = datetime.datetime.fromisoformat(farm_data[3])
        
        if datetime.datetime.now() >= end_time:
            job_data = next((job for job in FARM_JOBS if job["name"] == job_type), None)
            if job_data:
                reward = random.randint(job_data["min_reward"], job_data["max_reward"])
                
                # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
                event = random.choices(
                    FARM_EVENTS, 
                    weights=[e["chance"] for e in FARM_EVENTS]
                )[0]
                
                if "multiplier" in event:
                    reward = int(reward * event["multiplier"])
                elif "bonus" in event:
                    reward += event["bonus"]
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞
                if random.random() < job_data["risk"]:
                    reward = int(reward * 0.5)  # –ü–æ—Ç–µ—Ä—è 50% –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
                    event_message = f"‚ùå –ù–µ—É–¥–∞—á–∞! {event['name']}. –í—ã –ø–æ—Ç–µ—Ä—è–ª–∏ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–∞."
                else:
                    event_message = f"‚úÖ –£—Å–ø–µ—Ö! {event['name']}"
                
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
                cursor.execute('UPDATE users SET balance = balance + ? WHERE user_id = ?', (reward, user_id))
                cursor.execute('DELETE FROM user_farm WHERE user_id = ?', (user_id,))
                
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
                new_level = add_experience(user_id, job_data["exp"])
                
                conn.commit()
                conn.close()
                
                level_up_message = f"\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ {new_level} —É—Ä–æ–≤–Ω—è!" if new_level else ""
                
                return True, reward, event_message + level_up_message
    
    conn.close()
    return False, 0, "–§–∞—Ä–º –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω!"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞–∂
def can_rob(user_id):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM user_robberies WHERE user_id = ?', (user_id,))
    robbery_data = cursor.fetchone()
    
    if not robbery_data:
        return True
    
    last_robbery = datetime.datetime.fromisoformat(robbery_data[1])
    cooldown = datetime.timedelta(hours=1)
    
    conn.close()
    return datetime.datetime.now() - last_robbery >= cooldown

def update_robbery_stats(user_id, success):
    conn = sqlite3.connect(DATABASE_NAME)
    cursor = conn.cursor()
    
    cursor.execute('SELECT * FROM user_robberies WHERE user_id = ?', (user_id,))
    robbery_data = cursor.fetchone()
    
    if robbery_data:
        if success:
            cursor.execute('''
                UPDATE user_robberies 
                SET last_robbery = ?, success_count = success_count + 1 
                WHERE user_id = ?
            ''', (datetime.datetime.now(), user_id))
        else:
            cursor.execute('''
                UPDATE user_robberies 
                SET last_robbery = ?, fail_count = fail_count + 1 
                WHERE user_id = ?
            ''', (datetime.datetime.now(), user_id))
    else:
        if success:
            cursor.execute('''
                INSERT INTO user_robberies (user_id, last_robbery, success_count)
                VALUES (?, ?, 1)
            ''', (user_id, datetime.datetime.now()))
        else:
            cursor.execute('''
                INSERT INTO user_robberies (user_id, last_robbery, fail_count)
                VALUES (?, ?, 1)
            ''', (user_id, datetime.datetime.now()))
    
    conn.commit()
    conn.close()

# –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–≤–Ω–µ–π
def add_experience(user_id, exp):
    user_data = get_user_data(user_id)
    if not user_data:
        return None
    
    new_exp = user_data['experience'] + exp
    current_level = user_data['level']
    
    # –§–æ—Ä–º—É–ª–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è: level^2 * 1000
    exp_needed = current_level * current_level * 1000
    
    if new_exp >= exp_needed:
        new_level = current_level + 1
        new_exp = new_exp - exp_needed
        
        update_user_data(user_id, level=new_level, experience=new_exp)
        return new_level
    else:
        update_user_data(user_id, experience=new_exp)
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
def can_craft_item(user_id, item):
    user_resources = get_user_resources(user_id)
    user_data = get_user_data(user_id)
    
    if user_data['balance'] < item['craft_price']:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞"
    
    for resource, amount in item['resources'].items():
        if user_resources.get(resource, 0) < amount:
            return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {RESOURCES[resource]['name']}"
    
    return True, "–ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å"

def craft_item(user_id, item):
    success, message = can_craft_item(user_id, item)
    
    if not success:
        return False, message
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã –∏ –¥–µ–Ω—å–≥–∏
    user_resources = get_user_resources(user_id)
    for resource, amount in item['resources'].items():
        new_quantity = user_resources.get(resource, 0) - amount
        update_user_resource(user_id, resource, new_quantity)
    
    user_data = get_user_data(user_id)
    new_balance = user_data['balance'] - item['craft_price']
    update_user_data(user_id, balance=new_balance)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    add_to_inventory(user_id, "vehicle" if "car" in item['name'].lower() else "weapon", item['name'], str(item))
    
    return True, f"‚úÖ {item['name']} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Black Pass
def check_quest_progress(user_id, quest):
    user_data = get_user_data(user_id)
    user_inventory = get_user_inventory(user_id)
    user_quests = get_user_quests(user_id)
    
    quest_data = user_quests.get(quest["id"], {"progress": 0, "completed": False})
    
    if quest_data["completed"]:
        return quest_data["progress"], True
    
    requirement = quest["requirement"]
    progress = 0
    
    if requirement["type"] == "money":
        progress = min(user_data['balance'], requirement["amount"])
    elif requirement["type"] == "level":
        progress = min(user_data['level'], requirement["amount"])
    elif requirement["type"] == "house":
        houses = [item for item in user_inventory if item[2] == "house"]
        progress = min(len(houses), requirement["amount"])
    elif requirement["type"] == "cars":
        cars = [item for item in user_inventory if "car" in item[2].lower() or "üöó" in item[2] or "üèé" in item[2]]
        progress = min(len(cars), requirement["amount"])
    elif requirement["type"] == "business":
        businesses = [item for item in user_inventory if item[2] == "business"]
        progress = min(len(businesses), requirement["amount"])
    elif requirement["type"] == "family":
        family = get_user_family(user_id)
        progress = 1 if family else 0
    elif requirement["type"] == "weapon":
        weapons = [item for item in user_inventory if requirement["name"] in item[3]]
        progress = 1 if weapons else 0
    elif requirement["type"] == "craft":
        crafted_items = [item for item in user_inventory if "crafted" in item[3]]
        progress = min(len(crafted_items), requirement["amount"])
    elif requirement["type"] == "collection":
        progress = min(len(user_inventory), requirement["amount"])
    
    completed = progress >= requirement["amount"]
    update_user_quest(user_id, quest["id"], progress, completed)
    
    return progress, completed

def claim_quest_reward(user_id, quest):
    user_quests = get_user_quests(user_id)
    quest_data = user_quests.get(quest["id"])
    
    if not quest_data or not quest_data["completed"]:
        return False, "–ö–≤–µ—Å—Ç –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω"
    
    # –í—ã–¥–∞—á–∞ –Ω–∞–≥—Ä–∞–¥
    reward = quest["reward"]
    user_data = get_user_data(user_id)
    
    if "money" in reward:
        new_balance = user_data['balance'] + reward["money"]
        update_user_data(user_id, balance=new_balance)
    
    if "exp" in reward:
        add_experience(user_id, reward["exp"])
    
    if "items" in reward:
        for item in reward["items"]:
            # –ù–∞—Ö–æ–¥–∏–º —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞ –ø–æ —ç–º–æ–¥–∑–∏
            resource_type = None
            for res_key, res_data in RESOURCES.items():
                if res_data["emoji"] == item:
                    resource_type = res_key
                    break
            
            if resource_type:
                user_resources = get_user_resources(user_id)
                current_quantity = user_resources.get(resource_type, 0)
                update_user_resource(user_id, resource_type, current_quantity + 1)
    
    return True, "–ù–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!"

# === –ö–ù–û–ü–ö–ò –ò –ò–ù–¢–ï–†–§–ï–ô–°–´ ===

def get_main_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile"),
         InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="work")],
        [InlineKeyboardButton("üè™ –ú–∞–≥–∞–∑–∏–Ω", callback_data="shop"),
         InlineKeyboardButton("üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å", callback_data="inventory")],
        [InlineKeyboardButton("üî® –ö—Ä–∞—Ñ—Ç", callback_data="craft"),
         InlineKeyboardButton("üë• –°–µ–º—å–∏", callback_data="families")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games"),
         InlineKeyboardButton("‚ö° Black Pass", callback_data="black_pass")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
         InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_shop_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–∏", callback_data="shop_cars"),
         InlineKeyboardButton("üè† –î–æ–º–∞", callback_data="shop_houses")],
        [InlineKeyboardButton("üî´ –û—Ä—É–∂–∏–µ", callback_data="shop_weapons"),
         InlineKeyboardButton("üíº –ë–∏–∑–Ω–µ—Å—ã", callback_data="shop_businesses")],
        [InlineKeyboardButton("üì± –°–∏–º-–∫–∞—Ä—Ç—ã", callback_data="shop_simcards"),
         InlineKeyboardButton("üé≠ –°–∫–∏–Ω—ã", callback_data="shop_skins")],
        [InlineKeyboardButton("‚öôÔ∏è –†–µ—Å—É—Ä—Å—ã", callback_data="shop_resources"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_work_keyboard():
    keyboard = []
    for i in range(0, len(FARM_JOBS), 2):
        if i + 1 < len(FARM_JOBS):
            keyboard.append([
                InlineKeyboardButton(FARM_JOBS[i]["name"], callback_data=f"work_{i}"),
                InlineKeyboardButton(FARM_JOBS[i+1]["name"], callback_data=f"work_{i+1}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(FARM_JOBS[i]["name"], callback_data=f"work_{i}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
    return InlineKeyboardMarkup(keyboard)

def get_craft_keyboard():
    keyboard = [
        [InlineKeyboardButton("üöó –ö—Ä–∞—Ñ—Ç –º–∞—à–∏–Ω", callback_data="craft_cars"),
         InlineKeyboardButton("üî´ –ö—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è", callback_data="craft_weapons")],
        [InlineKeyboardButton("üì¶ –ú–æ–∏ —Ä–µ—Å—É—Ä—Å—ã", callback_data="craft_resources"),
         InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_craft_cars_keyboard():
    keyboard = []
    for i in range(0, len(CRAFTABLE_CARS), 2):
        if i + 1 < len(CRAFTABLE_CARS):
            keyboard.append([
                InlineKeyboardButton(CRAFTABLE_CARS[i]["name"], callback_data=f"craft_car_{i}"),
                InlineKeyboardButton(CRAFTABLE_CARS[i+1]["name"], callback_data=f"craft_car_{i+1}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(CRAFTABLE_CARS[i]["name"], callback_data=f"craft_car_{i}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft")])
    return InlineKeyboardMarkup(keyboard)

def get_families_keyboard():
    keyboard = [
        [InlineKeyboardButton("üë• –ú–æ—è —Å–µ–º—å—è", callback_data="family_my"),
         InlineKeyboardButton("üè† –°–æ–∑–¥–∞—Ç—å —Å–µ–º—å—é", callback_data="family_create")],
        [InlineKeyboardButton("üìä –¢–æ–ø —Å–µ–º–µ–π", callback_data="family_top"),
         InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Å–µ–º—å—é", callback_data="family_search")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_games_keyboard():
    keyboard = [
        [InlineKeyboardButton("üé∞ –ö–∞–∑–∏–Ω–æ", callback_data="game_casino"),
         InlineKeyboardButton("üéØ –†—É–ª–µ—Ç–∫–∞", callback_data="game_roulette")],
        [InlineKeyboardButton("üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã", callback_data="game_minigames"),
         InlineKeyboardButton("üèÜ –¢—É—Ä–Ω–∏—Ä—ã", callback_data="game_tournaments")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_black_pass_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∫–≤–µ—Å—Ç–æ–≤", callback_data="black_pass_quests"),
         InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—ã", callback_data="black_pass_rewards")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    user_data = get_user_data(user_id)
    
    if not user_data:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", callback_data="start_registration")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = f"""
üéÆ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Black Russia Bot!*

–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∏–≥—Ä—ã *Black Russia* - —Å–∞–º–æ–π –ø–æ–ø—É–ª—è—Ä–Ω–æ–π —Ä—É—Å—Å–∫–æ–π —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä—ã!

‚ö° *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üî® *–°–∏—Å—Ç–µ–º–∞ –∫—Ä–∞—Ñ—Ç–∞* - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏ –æ—Ä—É–∂–∏–µ
‚Ä¢ ‚ö° *Black Pass* - –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ üíº *20+ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç* - –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ –∏ –æ–ø—ã—Ç
‚Ä¢ üöó *50+ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π* - –û—Ç –í–ê–ó–∞ –¥–æ –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –∫–æ—Ä–∞–±–ª–µ–π
‚Ä¢ üè† *–≠–ª–∏—Ç–Ω–∞—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å* - –û—Ç –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ –Ω–µ–±–æ—Å–∫—Ä–µ–±–æ–≤
‚Ä¢ üë• *–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Å–µ–º—å–∏* - –û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∏ –¥–æ–º–∏–Ω–∏—Ä—É–π—Ç–µ
‚Ä¢ üéÆ *–ú–∏–Ω–∏-–∏–≥—Ä—ã –∏ –∫–∞–∑–∏–Ω–æ* - –ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É

üéØ *–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:*
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if not user_data['is_authenticated']:
            # –¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            auth_code = auth_system.generate_auth_code(user_id)
            
            auth_text = f"""
üîê *–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è*

–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:

üõ° *–ö–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:* `{auth_code}`

‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —á–∞—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è*
            """
            
            await update.message.reply_text(
                auth_text,
                parse_mode='Markdown'
            )
        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            main_menu_text = f"""
üéÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Black Russia*

–ü—Ä–∏–≤–µ—Ç, *{user.first_name}*! üëã

üí∞ –ë–∞–ª–∞–Ω—Å: *{user_data['balance']:,} ‚ÇΩ*
üéØ –£—Ä–æ–≤–µ–Ω—å: *{user_data['level']}*
‚≠ê –û–ø—ã—Ç: *{user_data['experience']:,} XP*
‚ö° Black Pass: *–£—Ä–æ–≤–µ–Ω—å {user_data['black_pass_tier']}*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
            """
            
            await update.message.reply_text(
                main_menu_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode='Markdown'
            )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    callback_data = query.data
    
    user_data = get_user_data(user_id)
    
    if not user_data:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    if not user_data['is_authenticated']:
        await query.edit_message_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ /start")
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–∞–Ω–Ω—ã—Ö
    if callback_data == "main_menu":
        main_menu_text = f"""
üéÆ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Black Russia*

–ü—Ä–∏–≤–µ—Ç, *{query.from_user.first_name}*! üëã

üí∞ –ë–∞–ª–∞–Ω—Å: *{user_data['balance']:,} ‚ÇΩ*
üéØ –£—Ä–æ–≤–µ–Ω—å: *{user_data['level']}*
‚≠ê –û–ø—ã—Ç: *{user_data['experience']:,} XP*
‚ö° Black Pass: *–£—Ä–æ–≤–µ–Ω—å {user_data['black_pass_tier']}*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        await query.edit_message_text(
            main_menu_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    
    elif callback_data == "profile":
        await show_profile(query, user_data)
    
    elif callback_data == "shop":
        await show_shop_menu(query)
    
    elif callback_data == "work":
        await show_work_menu(query)
    
    elif callback_data == "inventory":
        await show_inventory(query, user_id)
    
    elif callback_data == "craft":
        await show_craft_menu(query)
    
    elif callback_data == "families":
        await show_families_menu(query)
    
    elif callback_data == "games":
        await show_games_menu(query)
    
    elif callback_data == "black_pass":
        await show_black_pass_menu(query, user_id)
    
    elif callback_data == "settings":
        await show_settings(query)
    
    elif callback_data == "help":
        await show_help(query)
    
    elif callback_data.startswith("shop_"):
        await handle_shop_callback(query, callback_data, user_data)
    
    elif callback_data.startswith("work_"):
        await handle_work_callback(query, callback_data, user_id)
    
    elif callback_data.startswith("craft_"):
        await handle_craft_callback(query, callback_data, user_id)
    
    elif callback_data.startswith("family_"):
        await handle_family_callback(query, callback_data, user_id)
    
    elif callback_data.startswith("game_"):
        await handle_game_callback(query, callback_data, user_id)
    
    elif callback_data.startswith("black_pass_"):
        await handle_black_pass_callback(query, callback_data, user_id)

async def show_profile(query, user_data):
    user_resources = get_user_resources(user_data['user_id'])
    
    resources_text = ""
    for resource, quantity in user_resources.items():
        if quantity > 0:
            resources_text += f"{RESOURCES[resource]['emoji']} {RESOURCES[resource]['name']}: {quantity}\n"
    
    if not resources_text:
        resources_text = "–†–µ—Å—É—Ä—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"
    
    profile_text = f"""
üë§ *–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞*

üìõ *–ò–º—è:* {query.from_user.first_name}
üÜî *ID:* `{user_data['user_id']}`
üí∞ *–ë–∞–ª–∞–Ω—Å:* {user_data['balance']:,} ‚ÇΩ
üéØ *–£—Ä–æ–≤–µ–Ω—å:* {user_data['level']}
‚≠ê *–û–ø—ã—Ç:* {user_data['experience']:,} XP

üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 {user_data['phone_number']}
üöó *–ê–≤—Ç–æ–Ω–æ–º–µ—Ä:* {user_data['car_number']}
üåê *–°–µ—Ä–≤–µ—Ä:* {user_data['server'] or '–ù–µ –≤—ã–±—Ä–∞–Ω'}

üì¶ *–†–µ—Å—É—Ä—Å—ã:*
{resources_text}

üìÖ *–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:* {user_data['registered_at'][:10]}
    """
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.edit_message_text(
        profile_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_shop_menu(query):
    shop_text = """
üè™ *–ú–∞–≥–∞–∑–∏–Ω Black Russia*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:

üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏* - –û—Ç –í–ê–ó–∞ –¥–æ –ë—É–≥–∞—Ç—Ç–∏
üè† *–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å* - –û—Ç –∫–≤–∞—Ä—Ç–∏—Ä—ã –¥–æ –¥–≤–æ—Ä—Ü–∞
üî´ *–û—Ä—É–∂–∏–µ* - –î–ª—è –∑–∞—â–∏—Ç—ã –∏ –Ω–∞–ø–∞–¥–µ–Ω–∏—è
üíº *–ë–∏–∑–Ω–µ—Å—ã* - –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
üì± *–°–∏–º-–∫–∞—Ä—Ç—ã* - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞
üé≠ *–°–∫–∏–Ω—ã –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä—ã* - –î–ª—è —Å—Ç–∏–ª—è
‚öôÔ∏è *–†–µ—Å—É—Ä—Å—ã* - –î–ª—è –∫—Ä–∞—Ñ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
    """
    await query.edit_message_text(
        shop_text,
        reply_markup=get_shop_keyboard(),
        parse_mode='Markdown'
    )

async def show_work_menu(query):
    work_text = """
üíº *–†–∞–±–æ—Ç–∞ –≤ Black Russia*

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–Ω–µ–≥ –∏ –æ–ø—ã—Ç–∞:

üí° *–ß–µ–º –≤—ã—à–µ —Ä–∏—Å–∫ - —Ç–µ–º –≤—ã—à–µ –Ω–∞–≥—Ä–∞–¥–∞!*
‚ö° *–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è* –º–æ–≥—É—Ç —É–≤–µ–ª–∏—á–∏—Ç—å –≤–∞—à –¥–æ—Ö–æ–¥!

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:
    """
    await query.edit_message_text(
        work_text,
        reply_markup=get_work_keyboard(),
        parse_mode='Markdown'
    )

async def show_inventory(query, user_id):
    inventory = get_user_inventory(user_id)
    
    if not inventory:
        inventory_text = "üéí *–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç*\n\n–ü–æ—Å–µ—Ç–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–æ–≤–∞—Ä—ã!"
    else:
        inventory_text = "üéí *–í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:*\n\n"
        cars = [item for item in inventory if "car" in item[2].lower() or "üöó" in item[2] or "üèé" in item[2]]
        houses = [item for item in inventory if item[2] == "house"]
        weapons = [item for item in inventory if item[2] == "weapon"]
        businesses = [item for item in inventory if item[2] == "business"]
        
        if cars:
            inventory_text += "üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª–∏:*\n"
            for car in cars[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                inventory_text += f"‚Ä¢ {car[3]}\n"
        
        if houses:
            inventory_text += "\nüè† *–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å:*\n"
            for house in houses[:3]:
                inventory_text += f"‚Ä¢ {house[3]}\n"
        
        if weapons:
            inventory_text += "\nüî´ *–û—Ä—É–∂–∏–µ:*\n"
            for weapon in weapons[:3]:
                inventory_text += f"‚Ä¢ {weapon[3]}\n"
        
        if businesses:
            inventory_text += "\nüíº *–ë–∏–∑–Ω–µ—Å—ã:*\n"
            for business in businesses[:2]:
                inventory_text += f"‚Ä¢ {business[3]}\n"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.edit_message_text(
        inventory_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_craft_menu(query):
    craft_text = """
üî® *–°–∏—Å—Ç–µ–º–∞ –∫—Ä–∞—Ñ—Ç–∞ Black Russia*

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!

üöó *–ö—Ä–∞—Ñ—Ç –º–∞—à–∏–Ω* - –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —Å –æ—Å–æ–±—ã–º–∏ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏
üî´ *–ö—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è* - –ú–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ –±—É–¥—É—â–µ–≥–æ
üì¶ *–†–µ—Å—É—Ä—Å—ã* - –ü—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤

üí° *–î–ª—è –∫—Ä–∞—Ñ—Ç–∞ –≤–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è:*
‚Ä¢ –î–µ–Ω—å–≥–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ä–∞–±–æ—Ç—ã
‚Ä¢ –†–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –∫–≤–µ—Å—Ç—ã

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
    """
    await query.edit_message_text(
        craft_text,
        reply_markup=get_craft_keyboard(),
        parse_mode='Markdown'
    )

async def show_families_menu(query):
    families_text = """
üë• *–°–µ–º—å–∏ Black Russia*

–°–µ–º—å–∏ - —ç—Ç–æ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π –∏–≥—Ä—ã:

üëë *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–µ–º–µ–π:*
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–Ω—ã–µ –∑–∞—Ä–∞–±–æ—Ç–∫–∏
‚Ä¢ –ó–∞—â–∏—Ç–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
‚Ä¢ –í–æ–π–Ω—ã —Å –¥—Ä—É–≥–∏–º–∏ —Å–µ–º—å—è–º–∏
‚Ä¢ –û–±—â–∏–π –±–∞–Ω–∫ —Å–µ–º—å–∏
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await query.edit_message_text(
        families_text,
        reply_markup=get_families_keyboard(),
        parse_mode='Markdown'
    )

async def show_games_menu(query):
    games_text = """
üéÆ *–ò–≥—Ä—ã –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è*

–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –≤ –Ω–∞—à–∏—Ö –∏–≥—Ä–∞—Ö:

üé∞ *–ö–∞–∑–∏–Ω–æ* - –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –∞–∑–∞—Ä—Ç–Ω—ã–µ –∏–≥—Ä—ã
üéØ *–†—É–ª–µ—Ç–∫–∞* - –°—Ç–∞–≤–∫–∏ –Ω–∞ —á–∏—Å–ª–∞
üéÆ *–ú–∏–Ω–∏-–∏–≥—Ä—ã* - –†–∞–∑–ª–∏—á–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
üèÜ *–¢—É—Ä–Ω–∏—Ä—ã* - –°–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è —Å –ø—Ä–∏–∑–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:
    """
    await query.edit_message_text(
        games_text,
        reply_markup=get_games_keyboard(),
        parse_mode='Markdown'
    )

async def show_black_pass_menu(query, user_id):
    user_quests = get_user_quests(user_id)
    completed_quests = sum(1 for q in user_quests.values() if q["completed"])
    total_quests = len(BLACK_PASS_QUESTS)
    
    black_pass_text = f"""
‚ö° *Black Pass - –°–µ–∑–æ–Ω 1*

–°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏ –Ω–∞–≥—Ä–∞–¥!

üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:* {completed_quests}/{total_quests} –∫–≤–µ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
üéÅ *–ù–∞–≥—Ä–∞–¥—ã:* –î–µ–Ω—å–≥–∏, –æ–ø—ã—Ç –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã

üíé *–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–≤–µ—Å—Ç–æ–≤:*
‚Ä¢ –õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å
‚Ä¢ –ú–∏—Ñ–∏—á–µ—Å–∫–æ–µ –æ—Ä—É–∂–∏–µ
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
    """
    await query.edit_message_text(
        black_pass_text,
        reply_markup=get_black_pass_keyboard(),
        parse_mode='Markdown'
    )

async def show_settings(query):
    settings_text = """
‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞ –ø–æ–¥ —Å–µ–±—è:

üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
üåê –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
üîí –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏

*–§—É–Ω–∫—Ü–∏–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...*
    """
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.edit_message_text(
        settings_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_help(query):
    help_text = """
‚ÑπÔ∏è *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É Black Russia*

üìñ *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/profile - –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
/shop - –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω
/work - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å
/inventory - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
/craft - –û—Ç–∫—Ä—ã—Ç—å —Å–∏—Å—Ç–µ–º—É –∫—Ä–∞—Ñ—Ç–∞

üéÆ *–ò–≥—Ä–æ–≤–æ–π –ø—Ä–æ—Ü–µ—Å—Å:*
‚Ä¢ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –¥–µ–Ω—å–≥–∏ —Ä–∞–±–æ—Ç–æ–π
‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∫—Ä–∞—Ñ—Ç
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã Black Pass
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Å–µ–º—å–∏ —Å –¥—Ä—É–∑—å—è–º–∏
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∏–≥—Ä–∞—Ö –∏ —Ç—É—Ä–Ω–∏—Ä–∞—Ö

üí° *–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ —Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –±–∏–∑–Ω–µ—Å—ã –¥–ª—è –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
‚Ä¢ –°–æ–±–∏—Ä–∞–π—Ç–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã Black Pass –¥–ª—è —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥
    """
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
    await query.edit_message_text(
        help_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_shop_callback(query, callback_data, user_data):
    if callback_data == "shop_cars":
        await show_car_shop(query, user_data)
    elif callback_data == "shop_houses":
        await show_house_shop(query, user_data)
    elif callback_data == "shop_weapons":
        await show_weapon_shop(query, user_data)
    elif callback_data == "shop_businesses":
        await show_business_shop(query, user_data)
    elif callback_data == "shop_simcards":
        await show_simcard_shop(query, user_data)
    elif callback_data == "shop_skins":
        await show_skin_shop(query, user_data)
    elif callback_data == "shop_resources":
        await show_resource_shop(query, user_data)

async def handle_work_callback(query, callback_data, user_id):
    try:
        job_index = int(callback_data.replace("work_", ""))
        job_data = FARM_JOBS[job_index]
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –†–∞–±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    farm_status = get_farm_status(user_id)
    if farm_status:
        await query.edit_message_text("‚ùå –í—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ! –ó–∞–≤–µ—Ä—à–∏—Ç–µ —Ç–µ–∫—É—â—É—é —Ä–∞–±–æ—Ç—É.")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É
    job_data = start_farming(user_id, job_data["name"])
    
    if job_data:
        minutes = job_data['cooldown'] // 60
        seconds = job_data['cooldown'] % 60
        
        work_text = f"""
üíº *–í—ã –Ω–∞—á–∞–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å!*

üè¢ *–†–∞–±–æ—Ç–∞:* {job_data['name']}
üí∞ *–ó–∞—Ä–∞–±–æ—Ç–æ–∫:* {job_data['min_reward']:,} - {job_data['max_reward']:,} ‚ÇΩ
‚≠ê *–û–ø—ã—Ç:* {job_data['exp']} XP
‚è∞ *–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:* {minutes} –º–∏–Ω {seconds} —Å–µ–∫
‚ö° *–†–∏—Å–∫:* {job_data['risk']*100}%

üïê –í–µ—Ä–Ω–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø–ª–∞—Ç—É!
        """
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Ä–∞–±–æ—Ç–∞–º", callback_data="work")]]
        await query.edit_message_text(
            work_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    else:
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–∞–±–æ—Ç—ã")

async def handle_craft_callback(query, callback_data, user_id):
    if callback_data == "craft_cars":
        await show_craft_cars_menu(query, user_id)
    elif callback_data == "craft_weapons":
        await show_craft_weapons_menu(query, user_id)
    elif callback_data == "craft_resources":
        await show_craft_resources(query, user_id)
    elif callback_data.startswith("craft_car_"):
        await handle_craft_car(query, callback_data, user_id)
    elif callback_data.startswith("craft_weapon_"):
        await handle_craft_weapon(query, callback_data, user_id)

async def handle_family_callback(query, callback_data, user_id):
    if callback_data == "family_my":
        family_data = get_user_family(user_id)
        if family_data:
            family_text = f"""
üë• *–í–∞—à–∞ —Å–µ–º—å—è*

üè† *–ù–∞–∑–≤–∞–Ω–∏–µ:* {family_data[1]}
üî∞ *–¢–µ–≥:* {family_data[2]}
üëë *–í–ª–∞–¥–µ–ª–µ—Ü:* {family_data[3]}
üéØ *–£—Ä–æ–≤–µ–Ω—å:* {family_data[4]}
üí∞ *–ë–∞–Ω–∫:* {family_data[5]:,} ‚ÇΩ
üë§ *–í–∞—à–∞ —Ä–æ–ª—å:* {family_data[7]}
            """
        else:
            family_text = "‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —Å–µ–º—å–µ"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="families")]]
        await query.edit_message_text(
            family_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
    
    elif callback_data == "family_create":
        family_text = """
üè† *–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ–º—å–∏*

–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ–º—å–∏ –≤–≤–µ–¥–∏—Ç–µ:

/nf [–Ω–∞–∑–≤–∞–Ω–∏–µ] [—Ç–µ–≥]

–ü—Ä–∏–º–µ—Ä:
/nf RussianMafia RM

üí° *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å 5+
‚Ä¢ 1,000,000 ‚ÇΩ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ç–µ–≥
        """
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="families")]]
        await query.edit_message_text(
            family_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def handle_game_callback(query, callback_data, user_id):
    if callback_data == "game_casino":
        casino_text = """
üé∞ *–ö–∞–∑–∏–Ω–æ Black Russia*

–ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É –≤ –Ω–∞—à–µ–º –∫–∞–∑–∏–Ω–æ!

üéØ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:*
‚Ä¢ –°–ª–æ—Ç-–º–∞—à–∏–Ω—ã
‚Ä¢ –ë–ª—ç–∫–¥–∂–µ–∫
‚Ä¢ –ü–æ–∫–µ—Ä
‚Ä¢ –ö–æ—Å—Ç–∏

üíé *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:* 10,000 ‚ÇΩ
üíé *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞:* 1,000,000 ‚ÇΩ

‚ö° *–î–ª—è –∏–≥—Ä—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:*
/casino_slots [—Å—Ç–∞–≤–∫–∞] - –ò–≥—Ä–∞—Ç—å –≤ —Å–ª–æ—Ç—ã
/casino_blackjack [—Å—Ç–∞–≤–∫–∞] - –ë–ª—ç–∫–¥–∂–µ–∫
/casino_dice [—Å—Ç–∞–≤–∫–∞] - –ò–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
        """
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="games")]]
        await query.edit_message_text(
            casino_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )

async def handle_black_pass_callback(query, callback_data, user_id):
    if callback_data == "black_pass_quests":
        await show_black_pass_quests(query, user_id)
    elif callback_data == "black_pass_rewards":
        await claim_black_pass_rewards(query, user_id)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞
async def show_craft_cars_menu(query, user_id):
    craft_text = """
üöó *–ö—Ä–∞—Ñ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π*

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ!

üíé *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞:*
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –º–æ–¥–µ–ª–∏
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω
‚Ä¢ –í—ã—Å–æ–∫–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–∂–∏

–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:
    """
    await query.edit_message_text(
        craft_text,
        reply_markup=get_craft_cars_keyboard(),
        parse_mode='Markdown'
    )

async def show_craft_weapons_menu(query, user_id):
    craft_text = """
üî´ *–ö—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è*

–°–æ–∑–¥–∞–≤–∞–π—Ç–µ –º–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ –±—É–¥—É—â–µ–≥–æ!

üíé *–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∫—Ä–∞—Ñ—Ç–∞:*
‚Ä¢ –í—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ ability
‚Ä¢ –†–µ–¥–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
‚Ä¢ –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω

–î–æ—Å—Ç—É–ø–Ω–æ–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:

"""
    
    for i, weapon in enumerate(CRAFTABLE_WEAPONS):
        craft_text += f"‚Ä¢ {weapon['name']} - {weapon['craft_price']:,} ‚ÇΩ\n"
        craft_text += f"  üìñ {weapon['description']}\n"
        craft_text += f"  üí• –£—Ä–æ–Ω: {weapon['damage']}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        resources_text = ""
        for resource, amount in weapon['resources'].items():
            resources_text += f"{RESOURCES[resource]['emoji']} {amount} "
        craft_text += f"  üì¶ –†–µ—Å—É—Ä—Å—ã: {resources_text}\n\n"
    
    keyboard = [
        [InlineKeyboardButton("–ö—Ä–∞—Ñ—Ç Plasma Rifle", callback_data="craft_weapon_0")],
        [InlineKeyboardButton("–ö—Ä–∞—Ñ—Ç Quantum Grenade", callback_data="craft_weapon_1")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft")]
    ]
    
    await query.edit_message_text(
        craft_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def show_craft_resources(query, user_id):
    user_resources = get_user_resources(user_id)
    
    resources_text = "üì¶ *–í–∞—à–∏ —Ä–µ—Å—É—Ä—Å—ã:*\n\n"
    for resource, quantity in user_resources.items():
        resources_text += f"{RESOURCES[resource]['emoji']} *{RESOURCES[resource]['name']}*: {quantity}\n"
    
    if not user_resources:
        resources_text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤\n\n"
    
    resources_text += "\nüí° *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã:*\n"
    resources_text += "‚Ä¢ –ü–æ–∫—É–ø–∞–π—Ç–µ –≤ –º–∞–≥–∞–∑–∏–Ω–µ\n"
    resources_text += "‚Ä¢ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∫–≤–µ—Å—Ç—ã Black Pass\n"
    resources_text += "‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç–µ –≤ —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft")]]
    await query.edit_message_text(
        resources_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_craft_car(query, callback_data, user_id):
    try:
        car_index = int(callback_data.replace("craft_car_", ""))
        car = CRAFTABLE_CARS[car_index]
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –ê–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_data = get_user_data(user_id)
    can_craft, message = can_craft_item(user_id, car)
    
    craft_text = f"""
üöó *–ö—Ä–∞—Ñ—Ç {car['name']}*

üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:* {car['description']}
üíé *–†–µ–¥–∫–æ—Å—Ç—å:* {car['rarity']}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∞—Ñ—Ç–∞:* {car['craft_price']:,} ‚ÇΩ
üíµ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {user_data['balance']:,} ‚ÇΩ

üì¶ *–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã:*
"""
    
    user_resources = get_user_resources(user_id)
    for resource, amount in car['resources'].items():
        has_amount = user_resources.get(resource, 0)
        status = "‚úÖ" if has_amount >= amount else "‚ùå"
        craft_text += f"{status} {RESOURCES[resource]['emoji']} {RESOURCES[resource]['name']}: {has_amount}/{amount}\n"
    
    if can_craft:
        craft_text += f"\n‚úÖ *–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª—å!*"
        keyboard = [
            [InlineKeyboardButton("üî® –°–æ–∑–¥–∞—Ç—å", callback_data=f"confirm_craft_car_{car_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft_cars")]
        ]
    else:
        craft_text += f"\n‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤:* {message}"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft_cars")]]
    
    await query.edit_message_text(
        craft_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def handle_craft_weapon(query, callback_data, user_id):
    try:
        weapon_index = int(callback_data.replace("craft_weapon_", ""))
        weapon = CRAFTABLE_WEAPONS[weapon_index]
    except (ValueError, IndexError):
        await query.edit_message_text("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    user_data = get_user_data(user_id)
    can_craft, message = can_craft_item(user_id, weapon)
    
    craft_text = f"""
üî´ *–ö—Ä–∞—Ñ—Ç {weapon['name']}*

üìñ *–û–ø–∏—Å–∞–Ω–∏–µ:* {weapon['description']}
üíé *–†–µ–¥–∫–æ—Å—Ç—å:* {weapon['rarity']}
üí• *–£—Ä–æ–Ω:* {weapon['damage']}
üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∞—Ñ—Ç–∞:* {weapon['craft_price']:,} ‚ÇΩ
üíµ *–í–∞—à –±–∞–ª–∞–Ω—Å:* {user_data['balance']:,} ‚ÇΩ

üì¶ *–¢—Ä–µ–±—É–µ–º—ã–µ —Ä–µ—Å—É—Ä—Å—ã:*
"""
    
    user_resources = get_user_resources(user_id)
    for resource, amount in weapon['resources'].items():
        has_amount = user_resources.get(resource, 0)
        status = "‚úÖ" if has_amount >= amount else "‚ùå"
        craft_text += f"{status} {RESOURCES[resource]['emoji']} {RESOURCES[resource]['name']}: {has_amount}/{amount}\n"
    
    if can_craft:
        craft_text += f"\n‚úÖ *–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —ç—Ç–æ –æ—Ä—É–∂–∏–µ!*"
        keyboard = [
            [InlineKeyboardButton("üî® –°–æ–∑–¥–∞—Ç—å", callback_data=f"confirm_craft_weapon_{weapon_index}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft_weapons")]
        ]
    else:
        craft_text += f"\n‚ùå *–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤:* {message}"
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="craft_weapons")]]
    
    await query.edit_message_text(
        craft_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è Black Pass
async def show_black_pass_quests(query, user_id):
    quests_text = "‚ö° *Black Pass - –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–≤–µ—Å—Ç—ã:*\n\n"
    
    for quest in BLACK_PASS_QUESTS:
        progress, completed = check_quest_progress(user_id, quest)
        requirement = quest["requirement"]
        
        status = "‚úÖ" if completed else "üîÑ"
        progress_bar = "‚ñà" * int(progress / requirement["amount"] * 10) + "‚ñë" * (10 - int(progress / requirement["amount"] * 10))
        
        quests_text += f"{status} *{quest['name']}*\n"
        quests_text += f"üìñ {quest['description']}\n"
        quests_text += f"üìä {progress_bar} {progress}/{requirement['amount']}\n"
        
        if completed:
            quests_text += "üéÅ *–ù–∞–≥—Ä–∞–¥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø–æ–ª—É—á–µ–Ω–∏—é!*\n"
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≥—Ä–∞–¥—É
            reward_text = "üéÅ –ù–∞–≥—Ä–∞–¥–∞: "
            if "money" in quest["reward"]:
                reward_text += f"üí∞ {quest['reward']['money']:,} ‚ÇΩ "
            if "exp" in quest["reward"]:
                reward_text += f"‚≠ê {quest['reward']['exp']} XP "
            if "items" in quest["reward"]:
                for item in quest["reward"]["items"]:
                    reward_text += f"{item} "
            quests_text += f"{reward_text}\n"
        
        quests_text += "\n"
    
    keyboard = [
        [InlineKeyboardButton("üéÅ –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="black_pass_claim_all")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="black_pass")]
    ]
    
    await query.edit_message_text(
        quests_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

async def claim_black_pass_rewards(query, user_id):
    total_rewards = 0
    claimed_quests = []
    
    for quest in BLACK_PASS_QUESTS:
        progress, completed = check_quest_progress(user_id, quest)
        if completed:
            success, message = claim_quest_reward(user_id, quest)
            if success:
                total_rewards += 1
                claimed_quests.append(quest["name"])
    
    if total_rewards > 0:
        reward_text = f"üéâ *–ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–≥—Ä–∞–¥: {total_rewards}*\n\n"
        for quest_name in claimed_quests:
            reward_text += f"‚úÖ {quest_name}\n"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å Black Pass
        user_data = get_user_data(user_id)
        new_tier = min(user_data['black_pass_tier'] + total_rewards, len(BLACK_PASS_QUESTS))
        update_user_data(user_id, black_pass_tier=new_tier)
        
        reward_text += f"\n‚ö° *–£—Ä–æ–≤–µ–Ω—å Black Pass –ø–æ–≤—ã—à–µ–Ω –¥–æ {new_tier}!*"
    else:
        reward_text = "‚ùå *–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–≤–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥*"
    
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="black_pass")]]
    await query.edit_message_text(
        reward_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –§—É–Ω–∫—Ü–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ (–æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –º–∞–≥–∞–∑–∏–Ω —Ä–µ—Å—É—Ä—Å–æ–≤)
async def show_resource_shop(query, user_data):
    resource_text = """
‚öôÔ∏è *–ú–∞–≥–∞–∑–∏–Ω —Ä–µ—Å—É—Ä—Å–æ–≤*

–†–µ—Å—É—Ä—Å—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:

"""
    
    for resource_key, resource_data in RESOURCES.items():
        price = random.randint(100000, 5000000)  # –°–ª—É—á–∞–π–Ω–∞—è —Ü–µ–Ω–∞
        resource_text += f"{resource_data['emoji']} *{resource_data['name']}* - {price:,} ‚ÇΩ ({resource_data['rarity']})\n"
    
    resource_text += f"\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {user_data['balance']:,} ‚ÇΩ"
    
    keyboard = [
        [InlineKeyboardButton(f"–ö—É–ø–∏—Ç—å {RESOURCES['metal']['name']}", callback_data="buy_resource_metal")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="shop")]
    ]
    
    await query.edit_message_text(
        resource_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def start_registration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    user_data = get_user_data(user_id)
    if user_data:
        await query.edit_message_text("‚ùå –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        return
    
    # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_text = """
üöÄ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ Black Russia*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –∏–≥—Ä—ã Black Russia!

üìù *–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:*
1. –í—ã–±–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞
2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞  
3. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –Ω–∞–±–æ—Ä–∞
4. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è

üéÅ *–°—Ç–∞—Ä—Ç–æ–≤—ã–π –Ω–∞–±–æ—Ä:*
‚Ä¢ 1,000,000 ‚ÇΩ
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω —Å –Ω–æ–º–µ—Ä–æ–º
‚Ä¢ –ê–≤—Ç–æ–º–æ–±–∏–ª—å —Å –Ω–æ–º–µ—Ä–æ–º
‚Ä¢ –î–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–µ—Ä–≤–µ—Ä:
    """
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
    keyboard = []
    for i in range(0, len(SERVERS), 2):
        if i + 1 < len(SERVERS):
            keyboard.append([
                InlineKeyboardButton(SERVERS[i], callback_data=f"server_{i}"),
                InlineKeyboardButton(SERVERS[i+1], callback_data=f"server_{i+1}")
            ])
        else:
            keyboard.append([InlineKeyboardButton(SERVERS[i], callback_data=f"server_{i}")])
    
    await query.edit_message_text(
        registration_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞
async def handle_server_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id
    server_index = int(query.data.replace("server_", ""))
    selected_server = SERVERS[server_index]
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    create_user(user_id, query.from_user.username, query.from_user.first_name, query.from_user.last_name)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º
    update_user_data(user_id, server=selected_server)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    auth_code = auth_system.generate_auth_code(user_id)
    
    registration_complete_text = f"""
‚úÖ *–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!*

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {query.from_user.first_name}! 
–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Black Russia Bot!

üìä *–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:*
üåê *–°–µ—Ä–≤–µ—Ä:* {selected_server}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* +7 {get_user_data(user_id)['phone_number']}
üöó *–ê–≤—Ç–æ–º–æ–±–∏–ª—å:* {get_user_data(user_id)['car_number']}
üí∞ *–ë–∞–ª–∞–Ω—Å:* 1,000,000 ‚ÇΩ

üîê *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è*
–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:

üõ° *–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:* `{auth_code}`

‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —á–∞—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞*
    """
    
    await query.edit_message_text(
        registration_complete_text,
        parse_mode='Markdown'
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    message_text = update.message.text.strip()
    
    user_data = get_user_data(user_id)
    
    if not user_data:
        await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start")
        return
    
    if user_data['is_authenticated']:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω
        await update.message.reply_text(
            "üéÆ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    success, message = auth_system.verify_auth_code(user_id, message_text)
    
    if success:
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞
        update_user_data(user_id, is_authenticated=True)
        
        welcome_text = f"""
üéä *–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É, *{update.message.from_user.first_name}*! üéâ

–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞:

üí∞ *–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –¥–µ–Ω–µ–≥* - 20+ –≤–∏–¥–æ–≤ —Ä–∞–±–æ—Ç
üöó *–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç* - 50+ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π + —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫—Ä–∞—Ñ—Ç
üè† *–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å* - –û—Ç –∫–≤–∞—Ä—Ç–∏—Ä –¥–æ –Ω–µ–±–æ—Å–∫—Ä–µ–±–æ–≤
üî® *–ö—Ä–∞—Ñ—Ç* - –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
‚ö° *Black Pass* - –ö–≤–µ—Å—Ç—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –Ω–∞–≥—Ä–∞–¥–∞–º–∏
üë• *–°–µ–º—å–∏* - –û–±—ä–µ–¥–∏–Ω—è–π—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏
üéÆ *–ò–≥—Ä—ã* - –ò—Å–ø—ã—Ç–∞–π—Ç–µ —É–¥–∞—á—É

üéØ *–ù–∞—á–Ω–∏—Ç–µ —Å–≤–æ–µ –≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –∫ –≤–µ—Ä—à–∏–Ω–∞–º Black Russia!*

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode='Markdown'
        )
    else:
        # –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥
        await update.message.reply_text(f"‚ùå {message}")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = threading.Thread(target=run_web_server, daemon=True)
    web_thread.start()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_database()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(CallbackQueryHandler(handle_server_selection, pattern="^server_"))
    application.add_handler(CallbackQueryHandler(start_registration, pattern="^start_registration$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()